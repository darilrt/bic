import "iostream";
import "vector";
import "string";
import "Token.bic";

class Lexer {
    mut source : std::string;
    mut index : int;
    mut column : int;
    mut line : int;
    mut tokens : std::vector<Token>;
    mut currentChar : char;

    pub Lexer(source : const std::string&) {
        .source = source;
        .index = 0;
        .column = 1;
        .line = 1;
        .currentChar = .source[.index];
    }

    Peek() -> char {
        if ((.index + 1) < .source.size()) {
            ret .source[.index + 1];
        }
        ret '\0';
    }

    Peek2() -> char {
        if ((.index + 2) < .source.size()) {
            ret .source[.index + 2];
        }
        ret '\0';
    }

    PeekEquals(expected : char) -> bool {
        let peek : char = .Peek();
        if (peek == expected) {
            ret true;
        }
        ret false;
    }

    Peek2Equals(expected : char) -> bool {
        let peek : char = .Peek2();
        if (peek == expected) {
            ret true;
        }
        ret false;
    }

    Advance() {
        .index += 1;
        .column += 1;
        if (.index >= .source.size()) {
            .currentChar = '\0';
        } else {
            .currentChar = .source[.index];
        }

        if (.IsNewline()) {
            .column = 1;
            .line += 1;
        }
    }

    SkipWhitespace() {
        while (.IsWhitespace()) {
            .Advance();
        }
    }

    pub Parse() -> std::vector<Token> {
        mut tokens : std::vector<Token>;
        mut token : Token;
        while (token.tokenType != TokenType::EndOfFile) {
            token = .ParseToken();
            tokens.push_back(token);
        }
        ret tokens;
    }

    ParseToken() -> Token {
        while (.IsNotNull()) {
            if (.IsWhitespace()) {
                .SkipWhitespace();
                continue;
            }

            if (.IsNewline()) {
                .Advance();
                ret Token(TokenType::NewLine, "\n", .line, .column);
            }
            
            if (.IsAlpha()) {
                ret .ParseIdentifier();
            }

            if (.IsDigit()) {
                ret .ParseNumber();
            }

            if (.IsChar('"')) {
                ret .ParseString();
            }
            
            if (.IsChar(39)) {
                ret .ParseChar();
            }
            
            if (.IsChar('/')) {
                if (.PeekEquals('/')) {
                    .SkipComment();
                    continue;
                }
            }

            if (.Switch3('.', '.', '.')) { ret Token(TokenType::Ellipsis, "..."); }
            if (.Switch3('<', '<', '=')) { ret Token(TokenType::LShiftAssign, "<<="); }
            if (.Switch3('>', '>', '=')) { ret Token(TokenType::RShiftAssign, ">>="); }

            if (.Switch2('=', '=')) { ret Token(TokenType::Equal, "=="); }
            if (.Switch2('!', '=')) { ret Token(TokenType::NotEqual, "!="); }
            if (.Switch2('<', '=')) { ret Token(TokenType::LessEqual, "<="); }
            if (.Switch2('>', '=')) { ret Token(TokenType::GreaterEqual, ">="); }
            if (.Switch2('+', '+')) { ret Token(TokenType::Inc, "++"); }
            if (.Switch2('-', '-')) { ret Token(TokenType::Dec, "--"); }
            if (.Switch2('&', '&')) { ret Token(TokenType::And, "&&"); }
            if (.Switch2('|', '|')) { ret Token(TokenType::Or, "||"); }
            if (.Switch2('+', '=')) { ret Token(TokenType::AddAssign, "+="); }
            if (.Switch2('-', '=')) { ret Token(TokenType::SubAssign, "-="); }
            if (.Switch2('*', '=')) { ret Token(TokenType::MulAssign, "*="); }
            if (.Switch2('/', '=')) { ret Token(TokenType::DivAssign, "/="); }
            if (.Switch2('%', '=')) { ret Token(TokenType::ModAssign, "%="); }
            if (.Switch2('&', '=')) { ret Token(TokenType::AndAssign, "&="); }
            if (.Switch2('|', '=')) { ret Token(TokenType::OrAssign, "|="); }
            if (.Switch2('^', '=')) { ret Token(TokenType::XorAssign, "^="); }
            if (.Switch2('>', '>')) { ret Token(TokenType::RShift, ">>"); }
            if (.Switch2('<', '<')) { ret Token(TokenType::LShift, "<<"); }
            if (.Switch2('-', '>')) { ret Token(TokenType::Arrow, "->"); }
            if (.Switch2(':', ':')) { ret Token(TokenType::ScopeResolution, "::"); }

            if (.Switch1('+')) { ret Token(TokenType::Add, "+"); }
            if (.Switch1('-')) { ret Token(TokenType::Sub, "-"); }
            if (.Switch1('*')) { ret Token(TokenType::Mul, "*"); }
            if (.Switch1('/')) { ret Token(TokenType::Div, "/"); }
            if (.Switch1('%')) { ret Token(TokenType::Mod, "%"); }
            if (.Switch1('=')) { ret Token(TokenType::Assign, "="); }
            if (.Switch1('<')) { ret Token(TokenType::Less, "<"); }
            if (.Switch1('>')) { ret Token(TokenType::Greater, ">"); }
            if (.Switch1('!')) { ret Token(TokenType::Not, "!"); }
            if (.Switch1('&')) { ret Token(TokenType::And, "&"); }
            if (.Switch1('|')) { ret Token(TokenType::Or, "|"); }
            if (.Switch1('^')) { ret Token(TokenType::Xor, "^"); }
            if (.Switch1('~')) { ret Token(TokenType::Xor, "~"); }
            if (.Switch1('?')) { ret Token(TokenType::Question, "?"); }
            if (.Switch1(':')) { ret Token(TokenType::Colon, ":"); }
            if (.Switch1(';')) { ret Token(TokenType::Semicolon, ";"); }
            if (.Switch1(',')) { ret Token(TokenType::Comma, ","); }
            if (.Switch1('.')) { ret Token(TokenType::Dot, "."); }
            if (.Switch1('(')) { ret Token(TokenType::LParen, "("); }
            if (.Switch1(')')) { ret Token(TokenType::RParen, ")"); }
            if (.Switch1('[')) { ret Token(TokenType::LBracket, "["); }
            if (.Switch1(']')) { ret Token(TokenType::RBracket, "]"); }
            if (.Switch1('{')) { ret Token(TokenType::LBrace, "{"); }
            if (.Switch1('}')) { ret Token(TokenType::RBrace, "}"); }

            .Advance();
        }
        ret Token(TokenType::EndOfFile, "EOF", .column, .line);
    }

    ParseIdentifier() -> Token {
        mut identifier : std::string;
        while (IsAlphaNumeric()) {
            identifier += .currentChar;
            .Advance();
        }

        if (identifier == "if") { ret Token(TokenType::If, "if"); }
        if (identifier == "elif") { ret Token(TokenType::Elif, "elif"); }
        if (identifier == "else") { ret Token(TokenType::Else, "else"); }
        if (identifier == "while") { ret Token(TokenType::While, "while"); }
        if (identifier == "for") { ret Token(TokenType::For, "for"); }
        if (identifier == "break") { ret Token(TokenType::Break, "break"); }
        if (identifier == "continue") { ret Token(TokenType::Continue, "continue"); }
        if (identifier == "ret") { ret Token(TokenType::Ret, "ret"); }
        if (identifier == "class") { ret Token(TokenType::Class, "class"); }
        if (identifier == "type") { ret Token(TokenType::Type, "type"); }
        if (identifier == "const") { ret Token(TokenType::Const, "const"); }
        if (identifier == "let") { ret Token(TokenType::Let, "let"); }
        if (identifier == "mut") { ret Token(TokenType::Mut, "mut"); }
        if (identifier == "import") { ret Token(TokenType::Import, "import"); }
        if (identifier == "pub") { ret Token(TokenType::Pub, "pub"); }
        if (identifier == "priv") { ret Token(TokenType::Priv, "priv"); }
        if (identifier == "static") { ret Token(TokenType::Static, "static"); }
        if (identifier == "virtual") { ret Token(TokenType::Virtual, "virtual"); }
        if (identifier == "new") { ret Token(TokenType::New, "new"); }
        if (identifier == "del") { ret Token(TokenType::Del, "del"); }
        if (identifier == "operator") { ret Token(TokenType::Operator, "operator"); }
        if (identifier == "enum") { ret Token(TokenType::Enum, "enum"); }

        ret Token(TokenType::Ident, identifier, .column, .line);
    }

    ParseNumber() -> Token {
        mut number : std::string;
        while (.IsDigit()) {
            number += .currentChar;
            .Advance();
        }
        if (.currentChar == '.') {
            number += .currentChar;
            .Advance();
            while (.IsDigit()) {
                number += .currentChar;
                .Advance();
            }
            ret Token(TokenType::Float, number, .column, .line);
        }
        ret Token(TokenType::Int, number, .column, .line);
    }

    // TODO: accept scape sequences
    ParseString() -> Token {
        .Advance();
        mut string : std::string;
        mut isNotNull : bool = true;
        mut isNotChar : bool = true;
        while (isNotNull && isNotChar) {
            string += .currentChar;
            .Advance();
            isNotNull = .IsNotNull();
            isNotChar = !.IsChar('"');
        }
        .Advance();
        ret Token(TokenType::String, string, .column, .line);
    }

    // TODO: accept scape sequences
    ParseChar() -> Token {
        .Advance();
        mut character : std::string;
        mut isNotNull : bool = true;
        mut isNotChar : bool = true;
        while (isNotNull && isNotChar) {
            character += .currentChar;
            .Advance();
            isNotNull = .IsNotNull();
            isNotChar = !.IsChar(39);
        }
        .Advance();
        ret Token(TokenType::Char, character, .column, .line);
    }

    SkipComment() -> void {
        mut isNotNewline : bool = true;
        mut isNotNull : bool = true;
        while (isNotNull && isNotNewline) {
            .Advance();
            isNotNull = .IsNotNull();
            isNotNewline = !.IsNewline();
        }
    }

    Switch1(c : char) -> bool {
        if (.IsChar(c)) {
            .Advance();
            ret true;
        }
        ret false;
    }

    Switch2(expected1 : char, expected2 : char) -> bool {
        if (.currentChar == expected1 && .PeekEquals(expected2)) {
            .Advance();
            .Advance();
            ret true;
        }
        ret false;
    }

    Switch3(expected1 : char, expected2 : char, expected3 : char) -> bool {
        let isExpected1 : bool = .currentChar == expected1;
        let isExpected2 : bool = .PeekEquals(expected2);
        let isExpected3 : bool = .PeekEquals(expected3);
        if (isExpected1 && isExpected2 && isExpected3) {
            .Advance();
            .Advance();
            .Advance();
            ret true;
        }
        ret false;
    }

    // Character utilities
    IsChar(c : char) -> bool {
        ret .currentChar == c;
    }

    IsNull() -> bool {
        ret .currentChar == '\0';
    }

    IsNotNull() -> bool {
        ret !.IsNull();
    }

    IsWhitespace() -> bool {
        ret .currentChar == ' ' || .currentChar == '\t';
    }

    IsAlpha() -> bool {
        ret .currentChar >= 'a' && .currentChar <= 'z' || .currentChar >= 'A' && .currentChar <= 'Z';
    }

    IsDigit() -> bool {
        ret .currentChar >= '0' && .currentChar <= '9';
    }

    IsAlphaNumeric() -> bool {
        let alpha : bool = .IsAlpha();
        let numeric : bool = .IsDigit();
        ret alpha || numeric;
    }

    IsNewline() -> bool {
        ret .currentChar == '\n';
    }
}
import "iostream";
import "vector";
import "Token.bic";

// Base class for all AST nodes
class ASTNode {
    pub ASTNode() {
    }

    pub virtual ToString() const -> std::string {
        ret "ASTNode";
    }

    pub virtual Get() const -> std::string {
        ret "ASTNode";
    }
}

// Program, contains a list of declarations
class ASTProgram(pub ASTNode) {
    pub mut decls : std::vector<ASTNode*>;

    pub ASTProgram(declList : std::vector<ASTNode*>) {
        .decls = declList;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "";

        mut i : int = 0;
        while ((i) < .decls.size()) {
            str += ((.decls[i])->ToString()) + "\n";

            if ((i) < ((.decls.size()) - 1)) {
                str += "\n";
            }

            i++;
        }

        ret str;
    }
}

// Constant integer, float, string, char, etc.
class ASTConstant(pub ASTNode) {
    pub mut value : std::string;

    pub ASTConstant(value : std::string) {
        .value = value;
    }

    pub ToString() const -> std::string {
        ret "'" + .value + "'";
    }
}

// Variable
class ASTVariable(pub ASTNode) {
    pub mut name : std::string;

    pub ASTVariable(name : std::string) {
        .name = name;
    }

    pub ToString() const -> std::string {
        ret "'" + .name + "'";
    }

    pub Get() const -> std::string {
        ret .name;
    }
}

// Binary operation
class ASTBinaryOp(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut op : Token;
    pub mut right : ASTNode*;

    pub ASTBinaryOp(left : ASTNode*, op : Token, right : ASTNode*) {
        .left = left;
        .op = op;
        .right = right;
    }

    pub ~ASTBinaryOp() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.left->ToString()) + " " + (.op.ToString()) + " " + (.right->ToString()) + "]";
    }
}

// Unary operation
class ASTUnaryOp(pub ASTNode) {
    pub mut op : Token;
    pub mut right : ASTNode*;

    pub ASTUnaryOp(op : Token, right : ASTNode*) {
        .op = op;
        .right = right;
    }

    pub ~ASTUnaryOp() {
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.op.ToString()) + " " + (.right->ToString()) + "]";
    }
}

// Indexing operation
class ASTIndexOp(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTIndexOp(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTIndexOp() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.left->ToString()) + "[" + (.right->ToString()) + "]]";
    }
}

// Function call
class ASTFunctionCall(pub ASTNode) {
    pub mut func : ASTNode*;
    pub mut args : std::vector<ASTNode*>;

    pub ASTFunctionCall(func : ASTNode*) {
        .func = func;
    }

    pub ASTFunctionCall(func : ASTNode*, args : std::vector<ASTNode*>) {
        .func = func;
        .args = args;
    }

    pub ~ASTFunctionCall() {
        del .func;
        mut i : int = 0;
        while ((i) < .args.size()) {
            del .args[i];
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string = (.func->ToString()) + "(";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->ToString();

            if ((i) < (.args.size()) - 1) {
                str += ", "; 
            }

            i++;
        }

        str += ")";
        ret str;
    }
}

// Dot access
class ASTDotAccess(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut op : Token;
    pub mut right : ASTNode*;

    pub ASTDotAccess(left : ASTNode*, op : Token, right : ASTNode*) {
        .left = left;
        .op = op;
        .right = right;
    }

    pub ~ASTDotAccess() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.left->ToString()) + (.op.ToString()) + (.right->ToString()) + "]";
    }
}

// Scope Resolution
class ASTScopeResolution(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTScopeResolution(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTScopeResolution() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.left->ToString()) + "::" + (.right->ToString()) + "]";
    }
}

// Template Arguments
class ASTTemplateArgs(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut args : std::vector<ASTNode*>;

    pub ASTTemplateArgs(left : ASTNode*) {
        .left = left;
    }

    pub ASTTemplateArgs(left : ASTNode*, args : std::vector<ASTNode*>) {
        .left = left;
        .args = args;
    }

    pub ~ASTTemplateArgs() {
        del .left;
        mut i : int = 0;
        while ((i) < .args.size()) {
            del .args[i];
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string = (.left->ToString()) + "<";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->ToString();

            if ((i) < (.args.size()) - 1) {
                str += ", "; 
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTTemplateArgs";
    }
}

// Pointer Declaration
class ASTPointerDecl(pub ASTNode) {
    pub mut left : ASTNode*;

    pub ASTPointerDecl(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTPointerDecl() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret (.left->ToString()) + "*";
    }
}

// Reference Declaration
class ASTReferenceDecl(pub ASTNode) {
    pub mut left : ASTNode*;

    pub ASTReferenceDecl(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTReferenceDecl() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret (.left->ToString()) + "&";
    }
}

// Type Declaration
class ASTTypeDecl(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTTypeDecl(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTTypeDecl() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret (.left->ToString()) + " " + (.right->ToString());
    }
}

// body of a function
class ASTBody(pub ASTNode) {
    pub mut decls : std::vector<ASTNode*>;
 
    pub ASTBody(decls : std::vector<ASTNode*>) {
        .decls = decls;
    }

    pub ~ASTBody() {
        mut i : int = 0;
        while ((i) < .decls.size()) {
            del .decls[i];
        }
    }

    pub AddStatement(stmt : ASTNode*) -> void {
        .decls.push_back(stmt);
    }

    pub ToString() const -> std::string {
        mut str : std::string = "{";

        mut i : int = 0;
        while ((i) < .decls.size()) {
            str += (.decls[i])->ToString();

            if ((i) < (.decls.size()) - 1) {
                str += ", ";
            }
        }

        str += "}";
        ret str;
    }
}

// Type 
class ASTType(pub ASTNode) {
    pub mut left : ASTNode*;

    pub ASTType(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTType() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret (.left->ToString());
    }

    pub Get() const -> std::string {
        ret (.left->Get());
    }
}

// Argument Declaration
class ASTArgDecl(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTArgDecl(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTArgDecl() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret (.right->ToString()) + " " + (.left->ToString());
    }
}

// Template Declaration
class ASTTemplateDecl(pub ASTNode) {
    mut args : std::vector<ASTArgDecl*>;

    pub ASTTemplateDecl(args : std::vector<ASTArgDecl*>) {
        .args = args;
    }

    pub ~ASTTemplateDecl() {
        mut i : int = 0;
        while ((i) < .args.size()) {
            del .args[i];
        }
    }

    pub AddArg(arg : ASTArgDecl*) -> void {
        .args.push_back(arg);
    }

    pub ToString() const -> std::string {
        mut str : std::string = "template<";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->ToString();

            if ((i) < (.args.size()) - 1) {
                str += ", ";
            }

            i++;
        }

        str += ">";
        ret str;
    }
}

// Function Declaration 
class ASTFunctionDecl(pub ASTNode) {
    pub mut name : ASTVariable*;
    pub mut templateDecl : ASTNode*;
    pub mut args : std::vector<ASTArgDecl*>;
    pub mut fType : ASTType*;
    pub mut body : ASTBody*;

    pub ASTFunctionDecl(
            name : ASTVariable*,
            templateDecl : ASTTemplateDecl*,
            args : std::vector<ASTArgDecl*>,
            fType : ASTType*,
            body : ASTBody*) {
        .name = name;
        .templateDecl = templateDecl;
        .args = args;
        .fType = fType;
        .body = body;
    }

    pub ~ASTFunctionDecl() {
        del .name;
        del .templateDecl;
        mut i : int = 0;
        while ((i) < .args.size()) {
            del .args[i];
        }
        del .fType;
        del .body;
    }

    pub ToString() const -> std::string {
        mut str : std::string = (.templateDecl->ToString()) + " " + (.fType->ToString()) + " " + (.name->ToString()) + "(";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->ToString();

            if ((i) < (.args.size()) - 1) {
                str += ", ";
            }

            i++;
        }

        str += ") " + (.body->ToString());
        ret str;
    }
}
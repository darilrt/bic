import "iostream";
import "vector";
import "Common.bic";
import "Token.bic";

// Base class for all AST nodes
class ASTNode {
    pub ASTNode() {}
    pub virtual ToString() const -> std::string { ret "ASTNode"; }
    pub virtual Get() const -> std::string { ret "ASTNode"; }
    pub virtual GetType() const -> std::string { ret "ASTNode"; }
}

// Program, contains a list of declarations
class ASTProgram(pub ASTNode) {
    pub mut decls : std::vector<ASTNode*>;

    pub ASTProgram(declList : std::vector<ASTNode*>) {
        .decls = declList;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "";

        mut i : int = 0;
        while ((i) < .decls.size()) {
            str += ((.decls[i])->ToString());

            if ((i) < ((.decls.size()) - 1)) {
                str += "\n";
            }

            i++;
        }

        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTProgram";
    }

    pub GetType() const -> std::string {
        ret "ASTProgram";
    }
}

// Constant integer, float, string, char, etc.
class ASTConstant(pub ASTNode) {
    pub mut value : std::string;

    pub ASTConstant(value : std::string) {
        .value = value;
    }

    pub ToString() const -> std::string {
        ret "'" + .value + "'";
    }

    pub Get() const -> std::string {
        ret .value;
    }

    pub GetType() const -> std::string {
        ret "ASTConstant";
    }
}

// Variable
class ASTVariable(pub ASTNode) {
    pub mut name : std::string;

    pub ASTVariable(name : std::string) {
        .name = name;
    }

    pub ToString() const -> std::string {
        ret "'" + .name + "'";
    }

    pub Get() const -> std::string {
        ret .name;
    }

    pub GetType() const -> std::string {
        ret "ASTVariable";
    }
}

// Binary operation
class ASTBinaryOp(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut op : Token;
    pub mut right : ASTNode*;

    pub ASTBinaryOp(left : ASTNode*, op : Token, right : ASTNode*) {
        .left = left;
        .op = op;
        .right = right;
    }

    pub ~ASTBinaryOp() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.left->ToString()) + " " + (.op.ToString()) + " " + (.right->ToString()) + "]";
    }

    pub Get() const -> std::string {
        ret (.left->Get()) + " " + (.op.literal) + " " + (.right->Get());
    }

    pub GetType() const -> std::string {
        ret "ASTBinaryOp";
    }
}

// Unary operation
class ASTUnaryOp(pub ASTNode) {
    pub mut op : Token;
    pub mut right : ASTNode*;

    pub ASTUnaryOp(op : Token, right : ASTNode*) {
        .op = op;
        .right = right;
    }

    pub ~ASTUnaryOp() {
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.op.literal) + " " + (.right->ToString()) + "]";
    }

    pub Get() const -> std::string {
        ret (.op.literal) + " " + (.right->Get());
    }

    pub GetType() const -> std::string {
        ret "ASTUnaryOp";
    }
}

// Indexing operation
class ASTIndexOp(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTIndexOp(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTIndexOp() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.left->ToString()) + "[" + (.right->ToString()) + "]]";
    }

    pub Get() const -> std::string {
        ret (.left->Get()) + "[" + (.right->Get()) + "]";
    }
    
    pub GetType() const -> std::string {
        ret "ASTIndexOp";
    }
}

// Function call
class ASTFunctionCall(pub ASTNode) {
    pub mut func : ASTNode*;
    pub mut args : std::vector<ASTNode*>;

    pub ASTFunctionCall(func : ASTNode*) {
        .func = func;
    }

    pub ASTFunctionCall(func : ASTNode*, args : std::vector<ASTNode*>) {
        .func = func;
        .args = args;
    }

    pub ~ASTFunctionCall() {
        del .func;
        mut i : int = 0;
        while ((i) < .args.size()) {
            del .args[i];
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string = (.func->ToString()) + "(";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->ToString();

            if ((i) < (.args.size()) - 1) {
                str += ", "; 
            }

            i++;
        }

        str += ")";
        ret str;
    }

    pub Get() const -> std::string {
        mut str : std::string = (.func->Get()) + "(";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->Get();

            if ((i) < (.args.size()) - 1) {
                str += ", "; 
            }

            i++;
        }

        str += ")";
        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTFunctionCall";
    }
}

// Dot access
class ASTDotAccess(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut op : Token;
    pub mut right : ASTNode*;

    pub ASTDotAccess(left : ASTNode*, op : Token, right : ASTNode*) {
        .left = left;
        .op = op;
        .right = right;
    }

    pub ~ASTDotAccess() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.left->ToString()) + (.op.ToString()) + (.right->ToString()) + "]";
    }

    pub Get() const -> std::string {
        ret (.left->Get()) + (.op.literal) + (.right->Get());
    }

    pub GetType() const -> std::string {
        ret "ASTDotAccess";
    }
}

// Scope Resolution
class ASTScopeResolution(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTScopeResolution(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTScopeResolution() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + (.left->ToString()) + "::" + (.right->ToString()) + "]";
    }

    pub Get() const -> std::string {
        ret (.left->Get()) + "::" + (.right->Get());
    }

    pub GetType() const -> std::string {
        ret "ASTScopeResolution";
    }
}

// Template Arguments
class ASTTemplateArgs(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut args : std::vector<ASTNode*>;

    pub ASTTemplateArgs(left : ASTNode*) {
        .left = left;
    }

    pub ASTTemplateArgs(left : ASTNode*, args : std::vector<ASTNode*>) {
        .left = left;
        .args = args;
    }

    pub ~ASTTemplateArgs() {
        del .left;
        mut i : int = 0;
        while ((i) < .args.size()) {
            del .args[i];
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string = (.left->ToString()) + "<";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->ToString();

            if ((i) < (.args.size()) - 1) {
                str += ", "; 
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub Get() const -> std::string {
        mut str : std::string = (.left->Get()) + "<";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->Get();

            if ((i) < (.args.size()) - 1) {
                str += ", "; 
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTTemplateArgs";
    }
}

// Pointer Declaration
class ASTPointerDecl(pub ASTNode) {
    pub mut left : ASTNode*;

    pub ASTPointerDecl(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTPointerDecl() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret (.left->ToString()) + "*";
    }

    pub Get() const -> std::string {
        ret (.left->Get()) + "*";
    }

    pub GetType() const -> std::string {
        ret "ASTPointerDecl";
    }
}

// Reference Declaration
class ASTReferenceDecl(pub ASTNode) {
    pub mut left : ASTNode*;

    pub ASTReferenceDecl(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTReferenceDecl() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret (.left->ToString()) + "&";
    }

    pub Get() const -> std::string {
        ret (.left->Get()) + "&";
    }

    pub GetType() const -> std::string {
        ret "ASTReferenceDecl";
    }
}

// Type Declaration
class ASTTypeDecl(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTTypeDecl(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTTypeDecl() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret (.left->ToString()) + " " + (.right->ToString());
    }

    pub Get() const -> std::string {
        ret (.left->Get()) + " " + (.right->Get());
    }

    pub GetType() const -> std::string {
        ret "ASTTypeDecl";
    }
}

// body of a function
class ASTBody(pub ASTNode) {
    pub mut decls : std::vector<ASTNode*>;
 
    pub ASTBody(decls : std::vector<ASTNode*>) {
        .decls = decls;
    }

    pub ~ASTBody() {
        mut i : int = 0;
        while ((i) < .decls.size()) {
            del .decls[i];
        }
    }

    pub AddStatement(stmt : ASTNode*) -> void {
        .decls.push_back(stmt);
    }

    pub ToString() const -> std::string {
        mut str : std::string = "{";

        mut i : int = 0;
        while ((i) < .decls.size()) {
            str += (.decls[i])->ToString();

            if ((i) < (.decls.size()) - 1) {
                str += "\n";
            }

            i++;
        }

        str += "}";
        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTBody";
    }

    pub GetType() const -> std::string {
        ret "ASTBody";
    }
}

// Type 
class ASTType(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut isConst : bool = false;

    pub ASTType(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTType() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret (.left->ToString());
    }

    pub Get() const -> std::string {
        mut str : std::string = "";
        if (.isConst) {
            str = "const ";
        }
        str += (.left->Get());
        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTType";
    }
}

// Argument Declaration
class ASTArgDecl(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTArgDecl(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTArgDecl() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret (.right->ToString()) + " " + (.left->ToString());
    }

    pub Get() const -> std::string {
        ret (.right->Get()) + " " + (.left->Get());
    }

    pub GetType() const -> std::string {
        ret "ASTArgDecl";
    }
}

// Template Declaration
class ASTTemplateDecl(pub ASTNode) {
    pub mut args : std::vector<ASTArgDecl*>;

    pub ASTTemplateDecl(args : std::vector<ASTArgDecl*>) {
        .args = args;
    }

    pub ~ASTTemplateDecl() {
        mut i : int = 0;
        while ((i) < .args.size()) {
            del .args[i];
        }
    }

    pub AddArg(arg : ASTArgDecl*) -> void {
        .args.push_back(arg);
    }

    pub ToString() const -> std::string {
        mut str : std::string = "template<";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->ToString();

            if ((i) < (.args.size()) - 1) {
                str += ", ";
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub Get() const -> std::string {
        mut str : std::string = "template<";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->Get();

            if ((i) < (.args.size()) - 1) {
                str += ", ";
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTTemplateDecl";
    }
}

// Expression
class ASTExpr(pub ASTNode) {
    pub mut expr : ASTNode*;

    pub ASTExpr(expr : ASTNode*) {
        .expr = expr;
    }

    pub ~ASTExpr() {
        del .expr;
    }

    pub ToString() const -> std::string {
        ret (.expr->ToString());
    }

    pub Get() const -> std::string {
        ret (.expr->Get());
    }

    pub GetType() const -> std::string {
        ret "ASTExpr";
    }
}

// Function Declaration 
class ASTFunctionDecl(pub ASTNode) {
    pub mut name : ASTVariable*;
    pub mut templateDecl : ASTTemplateDecl*;
    pub mut args : std::vector<ASTArgDecl*>;
    pub mut fType : ASTType*;
    pub mut body : ASTBody*;
    pub mut attr : int;

    pub ASTFunctionDecl(
            name : ASTVariable*,
            templateDecl : ASTTemplateDecl*,
            args : std::vector<ASTArgDecl*>,
            fType : ASTType*,
            body : ASTBody*) {
        .name = name;
        .templateDecl = templateDecl;
        .args = args;
        .fType = fType;
        .body = body;
    }

    pub ~ASTFunctionDecl() {
        del .name;
        del .templateDecl;
        mut i : int = 0;
        while ((i) < .args.size()) {
            del .args[i];
        }
        del .fType;
        del .body;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "";

        if (.templateDecl != null) {
            str += (.templateDecl->ToString()) + " ";
        }

        str += (.fType->ToString()) + " " + (.name->ToString()) + "(";

        mut i : int = 0;
        while ((i) < .args.size()) {
            str += (.args[i])->ToString();

            if ((i) < (.args.size()) - 1) {
                str += ", ";
            }

            i++;
        }

        str += ") " + (.body->ToString());
        ret str;
    }
    
    pub Get() const -> std::string {
        ret "ASTFunctionDecl";
    }

    pub GetType() const -> std::string {
        ret "ASTFunctionDecl";
    }
}

// Return Statement
class ASTReturn(pub ASTNode) {
    pub mut expr : ASTExpr*;

    pub ASTReturn(expr : ASTExpr*) {
        .expr = expr;
    }

    pub ~ASTReturn() {
        del .expr;
    }

    pub ToString() const -> std::string {
        ret "return " + (.expr->ToString()) + ";";
    }

    pub Get() const -> std::string {
        ret "ASTReturn";
    }

    pub GetType() const -> std::string {
        ret "ASTReturn";
    }
}

// If Statement
class ASTIf(pub ASTNode) {
    pub mut expr : ASTExpr*;
    pub mut body : ASTBody*;
    pub mut elifs : std::vector<ASTIf*>;
    pub mut elseBody : ASTBody*;

    pub ASTIf(expr : ASTExpr*, body : ASTBody*) {
        .expr = expr;
        .body = body;
    }

    pub ASTIf(expr : ASTExpr*, body : ASTBody*, elifs : std::vector<ASTIf*>, elseBody : ASTBody*) {
        .expr = expr;
        .body = body;
        .elifs = elifs;
        .elseBody = elseBody;
    }

    pub ~ASTIf() {
        del .expr;
        del .body;
        del .elseBody;

        mut i : int = 0;
        while ((i) < .elifs.size()) {
            del .elifs[i];
        }
    }

    pub ToString() const -> std::string {
        ret "if (" + (.expr->ToString()) + ") " + (.body->ToString());
    }

    pub Get() const -> std::string {
        ret "ASTIf";
    }

    pub GetType() const -> std::string {
        ret "ASTIf";
    }
}

// Variable Declaration
class ASTVariableDecl(pub ASTNode) {
    pub mut name : ASTNode*;
    pub mut vType : ASTType*;
    pub mut value : ASTExpr*;
    pub mut isMutable : bool;

    pub ASTVariableDecl(
            name : ASTNode*,
            vType : ASTType*,
            value : ASTExpr*,
            isMutable : bool) {
        .name = name;
        .vType = vType;
        .value = value;
        .isMutable = isMutable;
    }

    pub ~ASTVariableDecl() {
        del .name;
        del .vType;
        del .value;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "";

        if (.isMutable) {
            str += "mut ";
        }

        str += (.vType->ToString()) + " " + (.name->ToString());

        if (.value != null) {
            str += " = " + (.value->ToString());
        }

        str += ";";
        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTVariableDecl";
    }

    pub GetType() const -> std::string {
        ret "ASTVariableDecl";
    }
}
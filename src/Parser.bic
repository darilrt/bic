import "vector";
import "Token.bic";
import "Lexer.bic";
import "AST.bic";

class ParserState {
    pub mut state : std::string;
    pub mut token : Token*;
    pub mut current : int;

    pub ParserState(state : std::string, current : int) {
        .state = state;
        .current = current;
    }
}

enum BodyType {
    Decl,
    Impl,
    Class
}

class Parser {
    mut lexer : Lexer*;
    mut tokens : std::vector<Token>;
    mut current : int;
    mut currentToken : Token*;
    mut prevToken : Token*;
    mut stateStack : std::vector<ParserState>;
    mut state : std::string;
    mut lines : std::vector<int>;

    pub Parser(lexer : Lexer*, lines : std::vector<int>) {
        .lexer = lexer;
        .tokens = lexer->Parse();
        .current = 0;
        .currentToken = &.tokens[.current];
        
        while ((.currentToken->tokenType) == TokenType::NewLine) {
            .current += 1;
            .currentToken = &.tokens[.current];
        }

        .prevToken = null;
    }

    pub Parse() -> ASTNode* {
        ret .Program();
    }

    PushState(state : std::string) -> void {
        .state = state;
        .stateStack.push_back(ParserState(.state, .current));
    }

    PopState(drop : bool) -> void {
        if ((.stateStack.size()) > 0) {
            .state = (.stateStack.back()).state;

            if (!drop) {
                .current = (.stateStack.back()).current;
                .currentToken = &.tokens[.current];
            }
        }

        .stateStack.pop_back();
    }

    ShowState() -> void {
        std::cout << "State: ";

        mut i : int = 0;
        while ((i) < .stateStack.size()) {
            std::cout << (.stateStack[i]).state << " <- ";
            i++;
        }
        std::cout << "\n";
    }

    IsInsideState(state : std::string) -> bool {
        mut i : int = 0;
        while ((i) < .stateStack.size()) {
            if ((.stateStack[i]).state == state) {
                ret true;
            }
            i++;
        }
        ret false;
    }

    PrintLine(line : int) -> void {
        mut lineStart : int = .lines[line];

        while ((lineStart) < .lexer->source.size()) {
            let c : char = .lexer->source[lineStart];
            if (c == '\n') {
                break;
            }
            std::cout << c;
            lineStart++;
        }
    }

    Eat(tokenType : TokenType) -> void {
        if ((.currentToken->tokenType) == tokenType) {
            .current += 1;
            .prevToken = .currentToken;
            .currentToken = &.tokens[.current];

            while ((.currentToken->tokenType) == TokenType::NewLine) {
                .current += 1;
                .prevToken = .currentToken;
                .currentToken = &.tokens[.current];
            }
        }
        else {
            mut error : std::string = "Expected token type: ";
            error += TokenTypeToString(tokenType);
            error += ", got: ";
            error += TokenTypeToString(.currentToken->tokenType);
            error += " at line: ";
            error += std::to_string(.currentToken->line);
            error += ", column: ";
            error += std::to_string(.currentToken->column);
            .Error(error);
            .PrintLine(.currentToken->line);
        }
    }

    EatNewLine() -> void {
        .Eat(TokenType::Semicolon);
        // if ((.prevToken->tokenType) == TokenType::NewLine) {
        //     .prevToken = .currentToken;
        // }
        // else {
        //     .Error("Expected newline");
        // }
    }

    Backtrack() -> void {
        if (.current > 0) {
            .current -= 1;
            .currentToken = &.tokens[.current];
        }
    }

    Error(msg : std::string) -> void {
        std::cout << "Error: " << msg << std::endl;
        exit(0);
    }

    IsAtEnd() -> bool {
        ret (.currentToken->tokenType) == (TokenType::EndOfFile);
    }

    IsType(tokenType : TokenType) -> bool {
        ret (.currentToken->tokenType) == tokenType;
    }

    IsKeyword() -> bool {
        ret (.currentToken->tokenType) > (TokenType::StartKeyword) && (.currentToken->tokenType) < (TokenType::EndKeyword);
    }

    IsState(state : std::string) -> bool {
        ret .state == state;
    }

    // Program -> Decl*
    Program() -> ASTNode* {
        mut decls : std::vector<ASTNode*>;

        while (!.IsAtEnd()) {
            decls.push_back(.DeclStatement());
        }

        ret new ASTProgram(decls);
    }

    // Expr: Term
    Expr() -> ASTExpr* {
        ret new ASTExpr(.AssignExpr());
    }

    // AssignExpr: CompExpr (("=" | "+=" | "-=" | "*=" | "/=" | "%=") CompExpr)*
    AssignExpr() -> ASTNode* {
        mut node : ASTNode* = .CompExpr();

        while ((.IsType(TokenType::Assign)) || 
               (.IsType(TokenType::AddAssign)) || 
               (.IsType(TokenType::SubAssign)) || 
               (.IsType(TokenType::MulAssign)) ||
               (.IsType(TokenType::DivAssign)) ||  
               (.IsType(TokenType::ModAssign)) || 
               (.IsType(TokenType::AndAssign)) || 
               (.IsType(TokenType::OrAssign)) || 
               (.IsType(TokenType::XorAssign)) || 
               (.IsType(TokenType::LShiftAssign)) || 
               (.IsType(TokenType::RShiftAssign))) {
            let operation : Token* = .currentToken;
            .Eat(.currentToken->tokenType);
            let right : ASTNode* = .CompExpr();
            node = new ASTBinaryOp(node, *operation, right);
        }

        ret node;
    }

    // CompExpr: Term ("==" | "!=" | "<" | "<=" | ">" | ">=") Expr
    CompExpr() -> ASTNode* {
        mut node : ASTNode* = .ShiftExpr();

        if ((.IsType(TokenType::Equal)) ||
            (.IsType(TokenType::NotEqual)) || 
            (.IsType(TokenType::Less)) || 
            (.IsType(TokenType::LessEqual)) ||
            (.IsType(TokenType::Greater)) || 
            (.IsType(TokenType::GreaterEqual))) {
            
            if ((.IsInsideState("TemplateArgs")) && (.IsType(TokenType::Greater))) {
                ret node;
            }

            let operation : Token* = .currentToken;
            .Eat(operation->tokenType);

            let right : ASTNode* = .Expr();
            node = new ASTBinaryOp(node, *operation, right);
        }

        ret node;
    }

    // ShiftExpr: Term ("<<" | ">>") Expr
    ShiftExpr() -> ASTNode* {
        mut node : ASTNode* = .Term();

        if ((.IsType(TokenType::LShift)) || 
            (.IsType(TokenType::RShift))) {
            let operation : Token* = .currentToken;
            .Eat(operation->tokenType);

            let right : ASTNode* = .Expr();
            node = new ASTBinaryOp(node, *operation, right);
        }

        ret node;
    }

    // Term: Factor ('+' | '-') Expr 
    Term() -> ASTNode* {
        mut node : ASTNode* = .BitwiseExpr();

        if ((.IsType(TokenType::Add)) || (.IsType(TokenType::Sub))) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            
            let right : ASTNode* = .Expr();
            node = new ASTBinaryOp(node, *token, right);
        }

        ret node;
    }

    // BitwiseExpr: Term ('|' | '&' | '^') BitwiseExpr
    BitwiseExpr() -> ASTNode* {
        mut node : ASTNode* = .Factor();

        if ((.IsType(TokenType::And))) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            
            .PushState("CheckingForPointer");
            let right : ASTNode* = .Expr();
            
            if (right != null) {
                .PopState(true);
                node = new ASTBinaryOp(node, *token, right);
            }
            else {
                .PopState(false);
                node = new ASTReferenceDecl(node);
            }
        }
        elif ((.IsType(TokenType::Or)) ||  
              (.IsType(TokenType::Xor))) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            
            let right : ASTNode* = .Expr();
            node = new ASTBinaryOp(node, *token, right);
        }

        ret node;
    }

    // Factor: IncDecExpr ('*' | '/' | '%') Factor
    Factor() -> ASTNode* {
        mut node : ASTNode* = .IncDecExpr();
        
        if (.IsType(TokenType::Mul)) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            
            .PushState("CheckingForPointer");
            let right : ASTNode* = .Factor();
            
            if (right != null) {
                .PopState(true);
                node = new ASTBinaryOp(node, *token, right);
            }
            else {
                .PopState(false);
                node = new ASTPointerDecl(node);
            }
        }
        elif ((.IsType(TokenType::Div)) || (.IsType(TokenType::Mod))) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            let right : ASTNode* = .Factor();
            node = new ASTBinaryOp(node, *token, right);
        }

        ret node;
    }

    // IncDecExpr: Unary ("++" | "--")
    IncDecExpr() -> ASTNode* {
        mut node : ASTNode* = .Unary();

        if ((.IsType(TokenType::Inc)) || (.IsType(TokenType::Dec))) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            let un : ASTUnaryOp* = new ASTUnaryOp(*token, node);
            un->isPostfix = true;
            node = un;
        }

        ret node;
    }

    // Unary: ('+' | '-' | '!' | '~' ) Unary | FunctionCall
    Unary() -> ASTNode* {
        if ((.IsType(TokenType::Add)) ||
            (.IsType(TokenType::Sub)) || 
            (.IsType(TokenType::Not)) || 
            (.IsType(TokenType::BitNot))) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            
            let right : ASTNode* = .Unary();

            ret new ASTUnaryOp(*token, right);
        }
        elif ((.IsType(TokenType::And)) || (.IsType(TokenType::Mul))) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            
            let right : ASTNode* = .Unary();
            ret new ASTUnaryOp(*token, right);
        }
        
        ret .DotAccess();
    }

    // FunctionCall: DotAccess ('(' ArgsValue? ')') | DotAccess
    FunctionCall() -> ASTNode* {
        mut node : ASTNode* = .IndexAccess(.Primary());

        if (node == null) { ret null; }

        if (.IsType(TokenType::LParen)) {
            .Eat(TokenType::LParen);
            if (.IsType(TokenType::RParen)) {
                .Eat(TokenType::RParen);
                ret new ASTFunctionCall(node);
            }

            let args : std::vector<ASTNode*> = .ArgsValue();
            .Eat(TokenType::RParen);
            ret new ASTFunctionCall(node, args);
        }

        ret node;
    }

    // DotAccess: IndexAccess ('.' | '->') DotAccess
    DotAccess() -> ASTNode* {
        mut node : ASTNode* = .IndexAccess(.FunctionCall());
        if (node == null) { ret null; }

        if ((.IsType(TokenType::Dot)) || (.IsType(TokenType::Arrow))) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);
            
            node = new ASTDotAccess(node, *token,  .DotAccess());
        }

        ret node;
    }

    // IndexAccess: Primary ('[' Expr ']')*
    IndexAccess(node : ASTNode*) -> ASTNode* {
        if (node == null) { ret null; }

        while (.IsType(TokenType::LBracket)) {
            let token : Token* = .currentToken;
            .Eat(token->tokenType);

            let index : ASTNode* = .Expr();
            .Eat(TokenType::RBracket);
            
            node = new ASTIndexOp(node, index);
        }

        ret node;
    }

    // Primary: Int | Float | '(' Expr ')' | Variable
    Primary() -> ASTNode* {
        mut node : ASTNode*;

        if (.IsType(TokenType::Int)) {
            node = new ASTConstant(.currentToken->literal);
            .Eat(TokenType::Int);
        }
        elif (.IsType(TokenType::Float)) {
            node = new ASTConstant(.currentToken->literal);
            .Eat(TokenType::Float);
        }
        elif (.IsType(TokenType::True)) {
            node = new ASTConstant(.currentToken->literal);
            .Eat(TokenType::True);
        }
        elif (.IsType(TokenType::Null)) {
            node = new ASTConstant(.currentToken->literal);
            .Eat(TokenType::Null);
        }
        elif (.IsType(TokenType::False)) {
            node = new ASTConstant(.currentToken->literal);
            .Eat(TokenType::False);
        }
        elif (.IsType(TokenType::LParen)) {
            .Eat(TokenType::LParen);
            node = .Expr();
            .Eat(TokenType::RParen);
        } 
        elif (.IsType(TokenType::Ident)) {
            node = .ScopeResolution();
        }
        elif (.IsType(TokenType::New)) {
            node = .New();
        }
        elif (.IsType(TokenType::Del)) {
            node = .Del();
        }
        elif (.IsType(TokenType::String)) {
            node = new ASTConstant('"' + .currentToken->literal + '"');
            .Eat(TokenType::String);
        }
        elif (.IsType(TokenType::Char)) {
            node = new ASTConstant("'" + .currentToken->literal + "'");
            .Eat(TokenType::Char);
        }
        elif (.IsType(TokenType::Dot)) {
            .Eat(TokenType::Dot);
            node = .ScopeResolution();
            ret new ASTThisAccess(node);
        }
        else {
            if (.IsInsideState("CheckingForPointer")) {
                ret null;
            }
            .Error("Expected an expression");
        }

        ret node;
    }

    // New: 'new' Expr
    New() -> ASTNode* {
        .Eat(TokenType::New);
        let node : ASTNode* = .Expr();
        ret new ASTNew(node);
    }

    // Del: 'del' '[]'? Expr
    Del() -> ASTNode* {
        .Eat(TokenType::Del);
        mut isArray : bool = false;
        if (.IsType(TokenType::LBracket)) {
            .Eat(TokenType::LBracket);
            .Eat(TokenType::RBracket);
            isArray = true;
        }

        let node : ASTNode* = .Expr();
        ret new ASTDel(node, isArray);
    }

    // IdentDecl: Identifier ('[' Expr? ']')*
    IdentDecl() -> ASTNode* {
        mut node : ASTNode* = new ASTVariable(.currentToken->literal);
        .Eat(TokenType::Ident);

        while (.IsType(TokenType::LBracket)) {
            .Eat(TokenType::LBracket);
            
            mut size : ASTNode* = null;
            if (!.IsType(TokenType::RBracket)) {
                size = .Expr();
            }

            .Eat(TokenType::RBracket);
            
            node = new ASTIndexOp(node, size);
        }

        ret node;
    }

    // Variable: Identifier ('<' TemplateArgs '>')?
    Variable() -> ASTNode* {
        mut node : ASTNode*;

        if (.IsType(TokenType::Ident)) {
            node = new ASTVariable(.currentToken->literal);
            .Eat(TokenType::Ident);
        }
        elif (.IsType(TokenType::Class)) {
            node = new ASTVariable(.currentToken->literal);
            .Eat(TokenType::Class);
        }
        elif (.IsType(TokenType::Type)) {
            node = new ASTVariable(.currentToken->literal);
            .Eat(TokenType::Type);
        }
        else {
            .Error("Expected an identifier");
        }

        if (.IsType(TokenType::Less)) {
            let tmp : ASTTemplateArgs* = .TemplateArgs(node);

            if (tmp != null) {
                node = tmp;
            }
        }

        ret node;
    }

    // ScopeResolution: Variable ('<' TemplateArgs '>')? ('::' Variable ('<' TemplateArgs '>')?)*
    ScopeResolution() -> ASTNode* {
        mut node : ASTNode* = .Variable();

        if (.IsType(TokenType::Less)) {
            let tmp : ASTTemplateArgs* = .TemplateArgs(node);

            if (tmp != null) {
                node = tmp;
            }
        }

        while (.IsType(TokenType::ScopeResolution)) {
            .Eat(TokenType::ScopeResolution);
            mut right : ASTNode* = .Variable();

            if (.IsType(TokenType::Less)) {
                let tmp : ASTTemplateArgs* = .TemplateArgs(right);

                if (tmp != null) {
                    right = tmp;
                }
            }

            node = new ASTScopeResolution(node, right);
        }
        

        ret node;
    }

    // TemplateArgs: node '<' ArgsValue '>'
    TemplateArgs(node : ASTNode*) -> ASTTemplateArgs* {
        .PushState("TemplateArgs");
        .Eat(TokenType::Less);
        let args : std::vector<ASTNode*> = .ArgsValue();
        
        if (.IsType(TokenType::Greater)) {
            .Eat(TokenType::Greater);
            .PopState(true);
            ret new ASTTemplateArgs(node, args);
        }
        .PopState(false);
        
        mut i : int = 0;
        while ((i) < args.size()) {
            del args[i];
            i += 1;
        }

        ret null;
    }

    // ArgsValue: Expr (',' Expr)*
    ArgsValue() -> std::vector<ASTNode*> {
        mut args : std::vector<ASTNode*>;

        args.push_back(.Expr());

        while (.IsType(TokenType::Comma)) {
            .Eat(TokenType::Comma);
            args.push_back(.Expr());
        }

        ret args;
    }

    // End of expresion parsing
    // Start of statement parsing

    // Body: '{' (Statement)* '}'
    Body(bodyType : BodyType) -> ASTBody* {
        .Eat(TokenType::LBrace);
        mut body : ASTBody* = new ASTBody();
        mut stmt : ASTNode*;

        while (!(.IsType(TokenType::RBrace))) {
            if (bodyType == BodyType::Decl) {
                stmt = .DeclStatement();
            }
            elif (bodyType == BodyType::Impl) {
                stmt = .ImplStatement();
            }
            elif (bodyType == BodyType::Class) {
                stmt = .ClassStatement();
            }
            body->AddStatement(stmt);
            
            if (.IsType(TokenType::EndOfFile)) {
                break;
            }
        }

        .Eat(TokenType::RBrace);
        ret body;
    }

    // Type: ScopeResolution ('*')* ('&')?
    Type() -> ASTType* {
        mut isConst : bool = false;
        if (.IsType(TokenType::Const)) {
            .Eat(TokenType::Const);
            isConst = true;
        }

        mut left : ASTNode* = .ScopeResolution();

        while (.IsType(TokenType::Mul)) {
            .Eat(TokenType::Mul);
            left = new ASTPointerDecl(left);
        }

        if (.IsType(TokenType::And)) {
            .Eat(TokenType::And);
            left = new ASTReferenceDecl(left);
        }

        mut ntype : ASTType* = new ASTType(left);
        ntype->isConst = isConst;

        ret ntype;
    }

    // ArgDecl: IdentDecl : Type
    ArgDecl() -> ASTArgDecl* {
        let name : ASTNode* = .IdentDecl();
        .Eat(TokenType::Colon);
        let _type : ASTNode* = .Type();

        ret new ASTArgDecl(name, _type);
    }

    // TypedArgs: ArgDecl (',' ArgDecl)*
    TypedArgs() -> std::vector<ASTArgDecl*> {
        mut args : std::vector<ASTArgDecl*>;

        args.push_back(.ArgDecl());

        while (.IsType(TokenType::Comma)) {
            .Eat(TokenType::Comma);
            args.push_back(.ArgDecl());
        }

        ret args;
    }

    // TemplateDecl: '<' TypedArgs '>' 
    TemplateDecl() -> ASTTemplateDecl* {
        .PushState("TemplateDecl");
        .Eat(TokenType::Less);
        let args : std::vector<ASTArgDecl*> = .TypedArgs();
        
        if (.IsType(TokenType::Greater)) {
            .Eat(TokenType::Greater);
            .PopState(true);
            ret new ASTTemplateDecl(args);
        }
        .PopState(false);
        
        mut i : int = 0;
        while ((i) < args.size()) {
            del args[i];
            i += 1;
        }

        ret null;
    }

    // VariableDecl: ('mut' | 'let') IdentDecl ':' Type ('=' Expr)?
    VariableDecl() -> ASTVariableDecl* {
        mut isMutable : bool = false;

        if (.IsType(TokenType::Mut)) {
            isMutable = true;
            .Eat(TokenType::Mut);
        }
        else {
            .Eat(TokenType::Let);
        }

        let name : ASTNode* = .IdentDecl();

        .Eat(TokenType::Colon);
        let _type : ASTType* = .Type();

        mut expr : ASTExpr* = null;
        if (.IsType(TokenType::Assign)) {
            .Eat(TokenType::Assign);
            expr = .Expr();
        }

        ret new ASTVariableDecl(name, _type, expr, isMutable);
    }

    // FunctionDecl: Identifier TemplateDecl? '(' TypedArgs ')' ('->' Type)? Body?
    FunctionDecl() -> ASTFunctionDecl* {
        let name : ASTVariable* = new ASTVariable(.currentToken->literal);
        .Eat(TokenType::Ident);

        mut tmp : ASTTemplateDecl* = null;
        if (.IsType(TokenType::Less)) {
            tmp = .TemplateDecl();
        }

        .Eat(TokenType::LParen);
        mut args : std::vector<ASTArgDecl*>;
        if (.IsType(TokenType::RParen)) {
            .Eat(TokenType::RParen);
        }
        else {
            args = .TypedArgs();
            .Eat(TokenType::RParen);
        }

        mut attrs : int = false;
        if (.IsType(TokenType::Const)) {
            .Eat(TokenType::Const);
            attrs |= Attribute::Const;
        }

        mut _type : ASTType* = null;
        if (.IsType(TokenType::Arrow)) {
            .Eat(TokenType::Arrow);
            _type = .Type();
        }

        mut body : ASTBody* = null;
        if (.IsType(TokenType::LBrace)) {
            body = .Body(BodyType::Impl);
        }

        mut func : ASTFunctionDecl* = new ASTFunctionDecl(name, tmp, args, _type, body);
        func->attr = attrs;
        
        ret func;
    }

    // ReturnStmt: 'ret' Expr
    ReturnStmt() -> ASTReturn* {
        .Eat(TokenType::Ret);
        ret new ASTReturn(.Expr());
    }

    // IfStmt: 'if' Expr Body ('elif' Body)* ('else' Body)?
    IfStmt() -> ASTIf* {
        .Eat(TokenType::If);
        let cond : ASTExpr* = .Expr();
        let body : ASTBody* = .Body(BodyType::Impl);

        mut elifs : std::vector<ASTIf*>;

        while (.IsType(TokenType::Elif)) {
            .Eat(TokenType::Elif);
            let elifCond : ASTExpr* = .Expr();
            let elifBody : ASTBody* = .Body(BodyType::Impl);
            elifs.push_back(new ASTIf(elifCond, elifBody));
        }

        mut elseBody : ASTBody* = null;
        if (.IsType(TokenType::Else)) {
            .Eat(TokenType::Else);
            elseBody = .Body(BodyType::Impl);
        }

        ret new ASTIf(cond, body, elifs, elseBody);
    }

    // WhileStmt: 'while' Expr Body
    WhileStmt() -> ASTWhile* {
        .Eat(TokenType::While);
        let cond : ASTExpr* = .Expr();
        let body : ASTBody* = .Body(BodyType::Impl);

        ret new ASTWhile(cond, body);
    }

    // ImportStmt: 'import' String
    ImportStmt() -> ASTImport* {
        .Eat(TokenType::Import);
        let path : Token* = .currentToken;
        .Eat(TokenType::String);

        ret new ASTImport(path);
    }

    // InherArg: ('priv' | 'pub')? ScopeResolution
    InherArg() -> ASTInherArg* {
        mut protection : Token* = null;

        if (.IsType(TokenType::Priv)) {
            protection = .currentToken;
            .Eat(TokenType::Priv);
        }
        elif (.IsType(TokenType::Pub)) {
            protection = .currentToken;
            .Eat(TokenType::Pub);
        }

        let name : ASTNode* = .ScopeResolution();
        
        ret new ASTInherArg(protection, name);
    }

    // InherArgs:  InherArg (',' InherArg)*
    InherArgs() -> std::vector<ASTInherArg*> {
        mut args : std::vector<ASTInherArg*>;

        args.push_back(.InherArg());

        while (.IsType(TokenType::Comma)) {
            .Eat(TokenType::Comma);
            args.push_back(.InherArg());
        }

        ret args;
    }

    // ClassDecl: 'class' Identifier TemplateDecl? ('(' InherArgs ')')? Body 
    ClassDecl() -> ASTClassDecl* {
        .Eat(TokenType::Class);
        let name : ASTVariable* = new ASTVariable(.currentToken->literal);
        .Eat(TokenType::Ident);

        mut tmp : ASTTemplateDecl* = null;
        if (.IsType(TokenType::Less)) {
            tmp = .TemplateDecl();
        }

        mut args : std::vector<ASTInherArg*>;
        if (.IsType(TokenType::LParen)) {
            .Eat(TokenType::LParen);
            args = .InherArgs();
            .Eat(TokenType::RParen);
        }

        let body : ASTBody* = .Body(BodyType::Class);

        ret new ASTClassDecl(name, tmp, args, body);
    }

    // Operator: 
    //    '+' | '-' | '*' | '/' | '%' | '^' | '&' | '|' |
    //    '~' | '!' | '=' | '<' | '>' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' |
    //    '<<' | '>>' | '>>=' | '<<=' | '==' | '!=' | '<=' | '>=' | '<=>' | '&&' | '||' | '++' | '--' |
    //    '->*' | '->' | '[]' | '()'
    Operator() -> std::string {
        let operation : std::string = "";

        if (.IsType(TokenType::Add)) { .Eat(TokenType::Add); ret "+"; }
        elif (.IsType(TokenType::Sub)) { .Eat(TokenType::Sub); ret "-"; }
        elif (.IsType(TokenType::Mul)) { .Eat(TokenType::Mul); ret "*"; }
        elif (.IsType(TokenType::Div)) { .Eat(TokenType::Div); ret "/"; }
        elif (.IsType(TokenType::Mod)) { .Eat(TokenType::Mod); ret "%"; }
        elif (.IsType(TokenType::Xor)) { .Eat(TokenType::Xor); ret "^"; }
        elif (.IsType(TokenType::Amp)) { .Eat(TokenType::Amp); ret "&"; }
        elif (.IsType(TokenType::Pipe)) { .Eat(TokenType::Pipe); ret "|"; }
        elif (.IsType(TokenType::BitNot)) { .Eat(TokenType::BitNot); ret "~"; }
        elif (.IsType(TokenType::Not)) { .Eat(TokenType::Not); ret "!"; }
        elif (.IsType(TokenType::Assign)) { .Eat(TokenType::Assign); ret "="; }
        elif (.IsType(TokenType::Less)) { .Eat(TokenType::Less); ret "<"; }
        elif (.IsType(TokenType::Greater)) { .Eat(TokenType::Greater); ret ">"; }
        elif (.IsType(TokenType::AddAssign)) { .Eat(TokenType::AddAssign); ret "+="; }
        elif (.IsType(TokenType::SubAssign)) { .Eat(TokenType::SubAssign); ret "-="; }
        elif (.IsType(TokenType::MulAssign)) { .Eat(TokenType::MulAssign); ret "*="; }
        elif (.IsType(TokenType::DivAssign)) { .Eat(TokenType::DivAssign); ret "/="; }
        elif (.IsType(TokenType::ModAssign)) { .Eat(TokenType::ModAssign); ret "%="; }
        elif (.IsType(TokenType::XorAssign)) { .Eat(TokenType::XorAssign); ret "^="; }
        elif (.IsType(TokenType::AndAssign)) { .Eat(TokenType::AndAssign); ret "&="; }
        elif (.IsType(TokenType::OrAssign)) { .Eat(TokenType::OrAssign); ret "|="; }
        elif (.IsType(TokenType::LShift)) { .Eat(TokenType::LShift); ret "<<"; }
        elif (.IsType(TokenType::RShift)) { .Eat(TokenType::RShift); ret ">>"; }
        elif (.IsType(TokenType::RShiftAssign)) { .Eat(TokenType::RShiftAssign); ret ">>="; }
        elif (.IsType(TokenType::LShiftAssign)) { .Eat(TokenType::LShiftAssign); ret "<<="; }
        elif (.IsType(TokenType::Equal)) { .Eat(TokenType::Equal); ret "=="; }
        elif (.IsType(TokenType::NotEqual)) { .Eat(TokenType::NotEqual); ret "!="; }
        elif (.IsType(TokenType::LessEqual)) { .Eat(TokenType::LessEqual); ret "<="; }
        elif (.IsType(TokenType::GreaterEqual)) { .Eat(TokenType::GreaterEqual); ret ">="; }
        // elif (.IsType(TokenType::Compare)) { .Eat(TokenType::Compare); ret "<=>"; }
        elif (.IsType(TokenType::And)) { .Eat(TokenType::And); ret "&&"; }
        elif (.IsType(TokenType::Or)) { .Eat(TokenType::Or); ret "||"; }
        elif (.IsType(TokenType::Inc)) { .Eat(TokenType::Inc); ret "++"; }
        elif (.IsType(TokenType::Dec)) { .Eat(TokenType::Dec); ret "--"; }
        // elif (.IsType(TokenType::ArrowStar)) { .Eat(TokenType::ArrowStar); ret "->*"; }
        elif (.IsType(TokenType::Arrow)) { .Eat(TokenType::Arrow); ret "->"; }
        elif (.IsType(TokenType::LBrace)) {
            .Eat(TokenType::LBrace);
            .Eat(TokenType::RBrace);
            ret "[]";
        }
        elif (.IsType(TokenType::LParen)) {
            .Eat(TokenType::LParen);
            .Eat(TokenType::RParen);
            ret "()";
        }
        else {
            .Error("Expected operator");
        }

        ret operation;
    }

    // OperatorDecl: 'operation' Operator '(' TypedArgs ')' ('->' Type) Body
    OperatorDecl() -> ASTOperatorDecl* {
        .Eat(TokenType::Operator);
        let operation : std::string = .Operator();

        .Eat(TokenType::LParen);
        let args : std::vector<ASTArgDecl*> = .TypedArgs();
        .Eat(TokenType::RParen);

        .Eat(TokenType::Arrow);
        let _type : ASTType* = .Type();

        let body : ASTBody* = .Body(BodyType::Impl);

        ret new ASTOperatorDecl(operation, args, _type, body);
    }

    // EnumField: Identifier ('=' Expr)?
    EnumField() -> ASTEnumField* {
        let name : ASTNode* = new ASTVariable(.currentToken->literal);
        .Eat(TokenType::Ident);

        mut value : ASTExpr* = null;

        if (.IsType(TokenType::Assign)) {
            .Eat(TokenType::Assign);
            value = .Expr();
        }

        ret new ASTEnumField(name, value);
    }

    // EnumFields: EnumField (',' EnumField)*
    EnumFields() -> std::vector<ASTEnumField*> {
        mut fields : std::vector<ASTEnumField*>;

        while (!.IsType(TokenType::RBrace)) {
            fields.push_back(.EnumField());

            if (.IsType(TokenType::Comma)) {
                .Eat(TokenType::Comma);
            }
        }

        ret fields;
    }
    
    // EnumDecl: 'enum' Ident '{' EnumFields '}'
    EnumDecl() -> ASTEnumDecl* {
        .Eat(TokenType::Enum);
        let name : ASTNode* = new ASTVariable(.currentToken->literal);
        .Eat(TokenType::Ident);

        .Eat(TokenType::LBrace);
        let fields : std::vector<ASTEnumField*> = .EnumFields();
        .Eat(TokenType::RBrace);

        ret new ASTEnumDecl(name, fields);
    }

    DeclStatement() -> ASTNode* {
        if (.IsType(TokenType::Semicolon)) {
            .Eat(TokenType::Semicolon);
            ret null;
        }
        elif ((.IsType(TokenType::Let)) || (.IsType(TokenType::Mut))) {
            let node : ASTNode* = .VariableDecl();
            .EatNewLine();
            ret node;
        }
        elif (.IsType(TokenType::Ident)) {
            ret .FunctionDecl();
        }
        elif (.IsType(TokenType::Import)) {
            ret .ImportStmt();
        }
        elif (.IsType(TokenType::Class)) {
            ret .ClassDecl();
        }
        elif (.IsType(TokenType::Enum)) {
            ret .EnumDecl();
        }
        else {
            .Error("Expected declaration statement");
        }

        ret null;
    }
    
    ImplStatement() -> ASTNode* {
        mut node : ASTNode* = null;

        if (.IsType(TokenType::Semicolon)) {
            ret null;
        }
        elif ((.IsType(TokenType::Let)) || (.IsType(TokenType::Mut))) {
            node = .VariableDecl();
            .EatNewLine();
        }
        elif (.IsType(TokenType::Ret)) {
            node = .ReturnStmt();
            .EatNewLine();
        }
        elif (.IsType(TokenType::If)) {
            node = .IfStmt();
        }
        elif (.IsType(TokenType::While)) {
            node = .WhileStmt();
        }
        elif (.IsType(TokenType::Break)) {
            .Eat(TokenType::Break);
            node = new ASTBreak();
            .EatNewLine();
        }
        elif (.IsType(TokenType::Continue)) {
            .Eat(TokenType::Continue);
            node = new ASTContinue();
            .EatNewLine();
        }
        else {
            node = .Expr();
            .EatNewLine();
        }
        
        ret node;
    }

    ClassStatement() -> ASTNode* {
        mut node : ASTNode* = null;

        if (.IsType(TokenType::Pub)) {
            .Eat(TokenType::Pub);
            node = .ClassStatement();
            node->attr |= Attribute::Public;
        }
        elif (.IsType(TokenType::Priv)) {
            .Eat(TokenType::Priv);
            node = .ClassStatement();
            node->attr |= Attribute::Private;
        }
        elif (.IsType(TokenType::Virtual)) {
            .Eat(TokenType::Virtual);
            node = .ClassStatement();
            node->attr |= Attribute::Virtual;
        }
        elif (.IsType(TokenType::Static)) {
            .Eat(TokenType::Static);
            node = .ClassStatement();
            node->attr |= Attribute::Static;
        }
        elif (.IsType(TokenType::Operator)) {
            node = .OperatorDecl();
        }
        elif ((.IsType(TokenType::Let)) || (.IsType(TokenType::Mut))) {
            node = .VariableDecl();
            .EatNewLine();
        }
        elif (.IsType(TokenType::Ident)) {
            node = .FunctionDecl();
        }
        elif (.IsType(TokenType::Xor)) {
            .Eat(TokenType::Xor);
            node = .FunctionDecl();
            node->attr |= Attribute::Destructor;
        }
        else {
            .Error("Expected class statement");
        }
        
        ret node;
    }
}
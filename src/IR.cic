include "iostream";
include "vector";
include "string";
include "sstream";
include "iomanip";
include "tuple";
include "AST.cic";
include "Common.cic";

class IRNode {
    pub IRNode() {
    }

    pub virtual Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << "IRNode Source";
        hs << "IRNode Header";
    }

    pub virtual GetName() const -> std::string {
        ret "";
    }

    pub virtual GetFullName() const -> std::string {
        ret "";
    }

    pub virtual IsTemplate() const -> bool {
        ret false;
    }
}

class IRProgram(pub IRNode) {
    pub mut decls : std::vector<IRNode*>;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        for decl : IRNode* in .decls {
            decl->Generate(ss, hs);
        }
    }
}

class IRInclude(pub IRNode) {
    pub mut path : std::string;

    GetExtension() -> std::string {
        let ext : std::string = .path.substr(.path.find_last_of(".") + 1);
        ret ext;
    }
    
    GetStem() -> std::string {
        let stem : std::string = .path.substr(0, .path.find_last_of("."));
        ret stem;
    }

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        let ext : std::string = .GetExtension();

        if ext == "cic" {
            hs << "#include" << " \"" << .GetStem() << ".hpp\"" << std::endl;
        }
        else {
            hs << "#include" << " \"" << .path << "\"" << std::endl;
        }
    }
}

class IRBody(pub IRNode) {
    pub mut decls : std::vector<IRNode*>;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        for decl : IRNode* in .decls {
            decl->Generate(ss, hs);
            if dynamic_cast<IRExpr*>(decl) != null { ss << ";\n"; }
        }
    }
}

class IRExpr(pub IRNode) {
    pub mut expr : std::string;

    pub IRExpr(expr : std::string) {
        .expr = expr;
    }

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << .expr;
    }

    pub ToString() const -> std::string {
        ret .expr;
    }
}

class IRFunction(pub IRNode) {
    pub mut name : std::string;
    pub mut returnType : std::string;
    pub mut params : std::vector<std::tuple<std::string, std::string> >;
    pub mut templateParams : std::vector<std::tuple<std::string, std::string> >;
    pub mut templateSpec : std::vector<std::string>;
    pub mut body : IRBody*;
    pub mut attr : int = Attribute::None;
    pub mut parent : IRNode*;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        mut rType : std::string = .returnType + " ";

        if .parent != null && dynamic_cast<IRClass*>(.parent) != null {
            mut protection : std::string = "protected: ";
            if .attr & Attribute::Public { protection = "public: "; }
            if .attr & Attribute::Private { protection = "private: "; }
            hs << protection;
            
            if .name == .parent->GetName() { rType = ""; }
        }

        .GenTemplate(hs);

        if .attr & Attribute::Destructor { rType = ""; }

        if .returnType != "void" && rType != "" {
            hs << "[[nodiscard]] ";
        }

        if .attr & Attribute::Static { hs << "static "; }
        if .attr & Attribute::Virtual { hs << "virtual "; }

        hs << rType;

        if .attr & Attribute::Destructor { hs << "~"; }

        hs << .name;
        .GenTemplateSpec(hs);

        .GenParamenters(hs);

        if .attr & Attribute::Const { hs << " const"; }

        if .IsTemplate() {
            hs << " {\n"; .body->Generate(hs, hs); hs << "}\n";
        }
        else {
            hs << ";\n";

            if .body != null {
                ss << rType << .GetFullName();
                .GenParamenters(ss);
                if .attr & Attribute::Const { ss << " const"; }
                ss << " {\n"; .body->Generate(ss, hs); ss << "}\n";
            }
        }
    }

    pub GetFullName() const -> std::string {
        mut fname : std::string = .name;
        if .parent != null && dynamic_cast<IRProgram*>(.parent) == null {
            if .parent->GetName() == .name && .attr & Attribute::Destructor {
                fname = "~" + .name;
            }

            ret .parent->GetFullName() + "::" + fname;
        }
        ret .name;
    }

    pub IsTemplate() const -> bool {
        ret .templateParams.size() > 0 ||
            .templateSpec.size() > 0 ||
            .parent != null && dynamic_cast<IRProgram*>(.parent) == null && .parent->IsTemplate();
    }

    pub GenTemplate(ss : std::stringstream&) const -> void {
        if .templateParams.size() > 0 || .templateSpec.size() > 0 {
            ss << "template<";
            mut i : int = 0;
            while i < .templateParams.size() {
                mut tType : std::string = std::get<0>(.templateParams[i]);

                if tType == "type" {
                    tType = "typename";
                }

                ss << tType << " " << std::get<1>(.templateParams[i]);
                if i < .templateParams.size() - 1 {
                    ss << ", ";
                }
                i++;
            }
            ss << "> ";
        }
    }

    pub GenTemplateSpec(ss : std::stringstream&) const -> void {
        if .templateSpec.size() > 0 {
            ss << "<";
            mut i : int = 0;
            while i < .templateSpec.size() {
                ss << .templateSpec[i];
                if i < .templateSpec.size() - 1 {
                    ss << ", ";
                }
                i++;
            }
            ss << ">";
        }
    }

    pub GenParamenters(ss : std::stringstream&) const -> void {
        ss << "(";
        mut i : int = 0;
        while i < .params.size() {
            ss << std::get<0>(.params[i]) << " " << std::get<1>(.params[i]);
            if i < .params.size() - 1 { ss << ", "; }
            i++;
        }
        ss << ")";
    }
}

class IROperator(pub IRNode) {
    pub mut name : std::string;
    pub mut returnType : std::string;
    pub mut params : std::vector<std::tuple<std::string, std::string> >;
    pub mut templateParams : std::vector<std::tuple<std::string, std::string> >;
    pub mut body : IRBody*;
    pub mut attr : int = Attribute::None;
    pub mut parent : IRNode*;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        mut rType : std::string = .returnType + " ";

        if .parent != null && dynamic_cast<IRClass*>(.parent) != null {
            mut protection : std::string = "protected: ";
            if .attr & Attribute::Public { protection = "public: "; }
            if .attr & Attribute::Private { protection = "private: "; }
            hs << protection;
            
            if .name == .parent->GetName() { rType = ""; }
        }

        .GenTemplate(hs);

        if .attr & Attribute::Destructor { rType = ""; }

        if .returnType != "void" && rType != "" {
            hs << "[[nodiscard]] ";
        }

        if .attr & Attribute::Static { hs << "static "; }
        if .attr & Attribute::Virtual { hs << "virtual "; }

        hs << rType;

        if .attr & Attribute::Destructor { hs << "~"; }

        hs << .name;

        .GenParamenters(hs);

        if .attr & Attribute::Const { hs << " const"; }

        if .IsTemplate() {
            hs << " {\n"; .body->Generate(hs, hs); hs << "}\n";
        }
        else {
            hs << ";\n";

            if .body != null {
                ss << rType << .GetFullName();
                .GenParamenters(ss);
                if .attr & Attribute::Const { ss << " const"; }
                ss << " {\n"; .body->Generate(ss, hs); ss << "}\n";
            }
        }
    }
    
    pub GetFullName() const -> std::string {
        mut fname : std::string = .name;
        if .parent != null && dynamic_cast<IRProgram*>(.parent) == null {
            if .parent->GetName() == .name && .attr & Attribute::Destructor {
                fname = "~" + .name;
            }

            ret .parent->GetFullName() + "::" + fname;
        }
        ret .name;
    }

    pub IsTemplate() const -> bool {
        ret .templateParams.size() > 0 || .parent != null && dynamic_cast<IRProgram*>(.parent) == null && .parent->IsTemplate();
    }

    pub GenTemplate(ss : std::stringstream&) const -> void {
        if .templateParams.size() > 0 {
            ss << "template<";
            mut i : int = 0;
            while i < .templateParams.size() {
                mut tType : std::string = std::get<0>(.templateParams[i]);

                if tType == "type" {
                    tType = "typename";
                }

                ss << tType << " " << std::get<1>(.templateParams[i]);
                if i < .templateParams.size() - 1 {
                    ss << ", ";
                }
                i++;
            }
            ss << "> ";
        }
    }

    pub GenParamenters(ss : std::stringstream&) const -> void {
        ss << "(";
        mut i : int = 0;
        while i < .params.size() {
            ss << std::get<0>(.params[i]) << " " << std::get<1>(.params[i]);
            if i < .params.size() - 1 { ss << ", "; }
            i++;
        }
        ss << ")";
    }
}

class IRReturn(pub IRNode) {
    pub mut expr : IRExpr*;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << "return ";
        if .expr != null {
            ss << .expr->ToString();
        }
        ss << ";\n";
    }
}

class IRIf(pub IRNode) {
    pub mut cond : IRExpr*;
    pub mut body : IRBody*;
    pub mut elifs : std::vector<IRIf*>;
    pub mut elseBody : IRBody*;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << "if (" << .cond->ToString() << ") {\n";
        .body->Generate(ss, hs);
        ss << "}\n";

        for elifIR : IRIf* in .elifs {
            ss << "else ";
            elifIR->Generate(ss, hs);
        }

        if .elseBody != null {
            ss << "else {\n";
            .elseBody->Generate(ss, hs);
            ss << "}\n";
        }
    }
}

class IRWhile(pub IRNode) {
    pub mut cond : IRExpr*;
    pub mut body : IRBody*;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << "while (" << .cond->ToString() << ") {\n";
        .body->Generate(ss, hs);
        ss << "}\n";
    }
}

class IRBreak(pub IRNode) {
    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << "break;\n";
    }
}

class IRContinue(pub IRNode) {
    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << "continue;\n";
    }
}

class IRImport(pub IRNode) {
    pub mut path : std::string;
}

class IRClass(pub IRNode) {
    pub mut name : std::string;
    pub mut templateParams : std::vector<std::tuple<std::string, std::string> >;
    pub mut templateSpec : std::vector<std::string>;
    pub mut body : IRBody*;
    pub mut attr : int = Attribute::None;
    pub mut inherits : std::vector<std::string>;
    pub mut parent : IRNode*;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        .GenTemplate(hs);
        hs << "class " << .name;
        .GenTemplateSpec(hs);
        .GenInherits(hs);
        hs << " {\n";
        .body->Generate(ss, hs);
        hs << "};\n";
    }

    pub GenTemplate(ss : std::stringstream&) -> void {
        if .templateParams.size() > 0 || templateSpec.size() > 0 {
            ss << "template<";
            mut i : int = 0;
            while i < .templateParams.size() {
                mut tType : std::string = std::get<0>(.templateParams[i]);

                if tType == "type" { tType = "typename"; }

                ss << tType + " " + std::get<1>(.templateParams[i]);
                if i < .templateParams.size() - 1 { ss << ", "; }
                i++;
            }
            ss << "> ";
        }
    }

    pub GenTemplateSpec(ss : std::stringstream&) -> void {
        if .templateSpec.size() > 0 {
            ss << "<";
            mut i : int = 0;
            while i < .templateSpec.size() {
                ss << .templateSpec[i];
                if i < .templateSpec.size() - 1 { ss << ", "; }
                i++;
            }
            ss << ">";
        }
    }

    pub GenInherits(ss : std::stringstream&) -> void {
        if .inherits.size() > 0 {
            ss << " : ";
            mut i : int = 0;
            while i < .inherits.size() {
                ss << .inherits[i];
                if i < .inherits.size() - 1 { ss << ", "; }
                i++;
            }
        }
    }

    pub GetFullName() const -> std::string {
        if .parent != null && dynamic_cast<IRProgram*>(.parent) == null {
            ret .parent->GetFullName() + "::" + .name;
        } else {
            ret .name;
        }
    }

    pub GetName() const -> std::string {
        ret .name;
    }

    pub IsTemplate() const -> bool {
        ret .templateParams.size() > 0 ||
            .templateSpec.size() > 0 ||
            .parent != null && dynamic_cast<IRProgram*>(.parent) == null && .parent->IsTemplate();
    }
}

class IREnum(pub IRNode) {
    pub mut name : std::string;
    pub mut values : std::vector<std::tuple<std::string, IRExpr*> >;
    pub mut parent : IRNode*;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        hs << "enum class " << .name << " {\n";

        for expr : std::tuple<std::string, IRExpr*> in .values {
            hs << std::get<0>(expr);

            if std::get<1>(expr) != null {
                hs << " = " << std::get<1>(expr)->ToString();
            }

            hs << ",\n";
        }

        hs << "};\n";
    }
}

class IRDel(pub IRNode) {
    pub mut expr : IRExpr*;
    pub mut isArray : bool = false;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << "delete ";
        if .isArray { ss << "[] "; }
        ss << .expr->ToString() << ";\n";
    }
}

class IRFor(pub IRNode) {
    pub mut isMutable : bool = false;
    pub mut varName : std::string;
    pub mut iterable : IRExpr*;
    pub mut body : IRBody*;
    
    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        ss << "for (";
        if !.isMutable { ss << "const "; }
        ss << .varName << " : " << .iterable->ToString() << ") {\n";
        .body->Generate(ss, hs);
        ss << "}\n";
    }
}

class IRVariable(pub IRNode) {
    pub mut name : std::string;
    pub mut vType : std::string;
    pub mut value : IRExpr*;
    pub mut parent : IRNode*;
    pub mut attr : int = 0;

    pub Generate(ss : std::stringstream&, hs : std::stringstream&) -> void {
        if .parent == null {
            if .attr & Attribute::Static { ss << "static "; }
            ss << .vType << " ";
            if .attr & Attribute::Const { ss << "const "; }
            ss << .name;

            if .value != nullptr {
                ss << " = " << .value->ToString();
            }

            ss << ";\n";
        }
        elif dynamic_cast<IRClass*>(.parent) != null {
            mut protection : std::string = "protected: ";
            if .attr & Attribute::Public { protection = "public: "; }
            if .attr & Attribute::Private { protection = "private: "; }
            hs << protection;

            let isStatic : bool = .attr & Attribute::Static;
            let isConst : bool = .attr & Attribute::Const;

            if isStatic { hs << "static "; }
            hs << .vType << " ";
            if isConst { hs << "const "; }
            hs << .name;

            if .value != null && (!isStatic || isConst) {
                hs << " = " << .value->ToString();
            }

            hs << ";\n";

            if isStatic && !isConst {
                ss << .vType << " " << .GetFullName();
                if .value != nullptr {
                    ss << " = " << .value->ToString();
                }
                ss << ";\n";
            }
        }
        elif dynamic_cast<IRProgram*>(.parent) != null {
            if .attr & Attribute::Static {
                hs << "static ";
                
                hs << .vType << " ";
                if .attr & Attribute::Const {
                    hs << "const " << .name;

                    if .value != nullptr {
                        hs << " = " << .value->ToString() << ";\n";
                    }
                }
                else {
                    hs << .name << ";\n";

                    ss << .vType << " " << .GetFullName();
                    if .value != nullptr {
                        ss << " = " << .value->ToString();
                    }
                    ss << ";\n";
                }
            }
            else {
                ss << .vType << " ";
                if .attr & Attribute::Const { ss << "const "; }
                ss << .name;

                if .value != nullptr {
                    ss << " = " << .value->ToString();
                }

                ss << ";\n";
            }
        }
    }
    
    pub GetFullName() const -> std::string {
        if .parent != nullptr && dynamic_cast<IRProgram*>(.parent) == null {
            ret .parent->GetFullName() + "::" + .name;
        }
        ret .name;
    }
}

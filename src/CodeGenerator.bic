import "iostream";
import "IR.bic";
import "Common.bic";

IsA<T : type>(node : IRNode*) -> bool {
    ret (dynamic_cast<T*>(node)) != null;
}

As<T : type>(node : IRNode*) -> T* {
    ret dynamic_cast<T*>(node);
}

class CodeGenerator {
    pub mut sourceBuffer : std::string = "";
    pub mut headerBuffer : std::string = "";
    pub mut indentCount : int = 0;
    pub mut indent : std::string = "";

    pub Generate(ir : IRNode*) -> void {
        std::cout << "Generating code..." << std::endl;

        if (IsA<IRProgram>(ir)) {
            GenerateProgram(As<IRProgram>(ir));
        }
    }

    Indent() -> void {
        mut i : int = 0;
        while ((i) < indentCount) {
            indent += "    ";
            i++;
        }
    }

    PushIndent() -> void {
        indentCount++;
        Indent();
    }

    PopIndent() -> void {
        indentCount--;
        Indent();
    }

    GenerateProgram(node : IRProgram*) -> void {

    }
}
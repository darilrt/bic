include "iostream";
include "vector";
include "Common.cic";
include "Token.cic";

// Base class for all AST nodes
class ASTNode {
    pub mut attr : int = 0;

    pub ASTNode() {}
    pub virtual ToString() const -> std::string { ret "ASTNode"; }
    pub virtual Get() const -> std::string { ret "ASTNode"; }
    pub virtual GetType() const -> std::string { ret "ASTNode"; }
}

// Expression
class ASTExpr(pub ASTNode) {
    pub mut expr : ASTNode*;

    pub ASTExpr(expr : ASTNode*) {
        .expr = expr;
    }

    pub ~ASTExpr() {
        del .expr;
    }

    pub ToString() const -> std::string {
        ret .expr->ToString();
    }

    pub Get() const -> std::string {
        ret .expr->Get();
    }

    pub GetType() const -> std::string {
        ret "ASTExpr";
    }
}

// Program, contains a list of declarations
class ASTProgram(pub ASTNode) {
    pub mut decls : std::vector<ASTNode*>;

    pub ASTProgram(declList : std::vector<ASTNode*>) {
        .decls = declList;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "";

        mut i : int = 0;
        while i < .decls.size() {
            str += .decls[i]->ToString();

            if i < .decls.size() - 1 {
                str += "\n";
            }

            i += 1;
        }

        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTProgram";
    }

    pub GetType() const -> std::string {
        ret "ASTProgram";
    }
}

// Constant integer, float, string, char, etc.
class ASTConstant(pub ASTNode) {
    pub mut value : std::string;

    pub ASTConstant(value : std::string) {
        .value = value;
    }

    pub ToString() const -> std::string {
        ret "'" + .value + "'";
    }

    pub Get() const -> std::string {
        ret .value;
    }

    pub GetType() const -> std::string {
        ret "ASTConstant";
    }
}

// Variable
class ASTVariable(pub ASTNode) {
    pub mut name : std::string;

    pub ASTVariable(name : std::string) {
        .name = name;
    }

    pub ToString() const -> std::string {
        ret "'" + .name + "'";
    }

    pub Get() const -> std::string {
        ret .name;
    }

    pub GetType() const -> std::string {
        ret "ASTVariable";
    }
}

// Binary operation
class ASTBinaryOp(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut operation : Token;
    pub mut right : ASTNode*;

    pub ASTBinaryOp(left : ASTNode*, operation : Token, right : ASTNode*) {
        .left = left;
        .operation = operation;
        .right = right;
    }

    pub ~ASTBinaryOp() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + .left->ToString() + " " + .operation.ToString() + " " + .right->ToString() + "]";
    }

    pub Get() const -> std::string {
        ret .left->Get() + " " + .operation.literal + " " + .right->Get();
    }

    pub GetType() const -> std::string {
        ret "ASTBinaryOp";
    }
}

// Unary operation
class ASTUnaryOp(pub ASTNode) {
    pub mut operation : Token;
    pub mut right : ASTNode*;
    pub mut isPostfix : bool = false;

    pub ASTUnaryOp(operation : Token, right : ASTNode*) {
        .operation = operation;
        .right = right;
    }

    pub ~ASTUnaryOp() {
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + .operation.literal + " " + .right->ToString() + "]";
    }

    pub Get() const -> std::string {
        if (.isPostfix) {
            ret .right->Get() + .operation.literal;
        } else {
            ret .operation.literal + .right->Get();
        }
    }

    pub GetType() const -> std::string {
        ret "ASTUnaryOp";
    }
}

// Parenthesis
class ASTParenthesis(pub ASTNode) {
    pub mut expr : ASTNode*;

    pub ASTParenthesis(expr : ASTNode*) {
        .expr = expr;
    }

    pub ~ASTParenthesis() {
        del .expr;
    }

    pub ToString() const -> std::string {
        ret "(" + .expr->ToString() + ")";
    }

    pub Get() const -> std::string {
        ret "(" + .expr->Get() + ")";
    }

    pub GetType() const -> std::string {
        ret "ASTParenthesis";
    }
}

// Indexing operation
class ASTIndexOp(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTIndexOp(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTIndexOp() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + .left->ToString() + "[" + .right->ToString() + "]]";
    }

    pub Get() const -> std::string {
        let left : std::string = .left->Get();
        mut right : std::string;

        if .right != null {
            right = .right->Get();
        }

        ret left + "[" + right + "]";
    }
    
    pub GetType() const -> std::string {
        ret "ASTIndexOp";
    }
}

// Function call
class ASTFunctionCall(pub ASTNode) {
    pub mut func : ASTNode*;
    pub mut args : std::vector<ASTNode*>;

    pub ASTFunctionCall(func : ASTNode*) {
        .func = func;
    }

    pub ASTFunctionCall(func : ASTNode*, args : std::vector<ASTNode*>) {
        .func = func;
        .args = args;
    }

    pub ~ASTFunctionCall() {
        del .func;
        mut i : int = 0;
        while i < .args.size() {
            del .args[i];
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string;

        str += .func->ToString() + "(";

        mut i : int = 0;
        while i < .args.size() {
            str += .args[i]->ToString();

            if i < .args.size() - 1 {
                str += ", "; 
            }

            i += 1;
        }

        str += ")";
        ret str;
    }

    pub Get() const -> std::string {
        mut str : std::string = .func->Get() + "(";

        mut i : int = 0;
        while i < .args.size() {
            str += .args[i]->Get();

            if i < .args.size() - 1 {
                str += ", "; 
            }

            i++;
        }

        str += ")";
        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTFunctionCall";
    }
}

// Dot access
class ASTDotAccess(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut operation : Token;
    pub mut right : ASTNode*;

    pub ASTDotAccess(left : ASTNode*, operation : Token, right : ASTNode*) {
        .left = left;
        .operation = operation;
        .right = right;
    }

    pub ~ASTDotAccess() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + .left->ToString() + .operation.ToString() + .right->ToString() + "]";
    }

    pub Get() const -> std::string {
        ret .left->Get() + .operation.literal + .right->Get();
    }

    pub GetType() const -> std::string {
        ret "ASTDotAccess";
    }
}

// This Access
class ASTThisAccess(pub ASTNode) {
    pub mut right : ASTNode*;

    pub ASTThisAccess(right : ASTNode*) {
        .right = right;
    }

    pub ~ASTThisAccess() {
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[this->" + .right->ToString() + "]";
    }

    pub Get() const -> std::string {
        ret "this->" + .right->Get();
    }

    pub GetType() const -> std::string {
        ret "ASTThisAccess";
    }
}

// Scope Resolution
class ASTScopeResolution(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTScopeResolution(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTScopeResolution() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret "[" + .left->ToString() + "::" + .right->ToString() + "]";
    }

    pub Get() const -> std::string {
        ret .left->Get() + "::" + .right->Get();
    }

    pub GetType() const -> std::string {
        ret "ASTScopeResolution";
    }
}

// Template Arguments
class ASTTemplateArgs(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut args : std::vector<ASTNode*>;

    pub ASTTemplateArgs(left : ASTNode*) {
        .left = left;
    }

    pub ASTTemplateArgs(left : ASTNode*, args : std::vector<ASTNode*>) {
        .left = left;
        .args = args;
    }

    pub ~ASTTemplateArgs() {
        del .left;
        mut i : int = 0;
        while i < .args.size() {
            del .args[i];
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string = .left->ToString() + "<";

        mut i : int = 0;
        while i < .args.size() {
            str += .args[i]->ToString();

            if i < .args.size() - 1 {
                str += ", "; 
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub Get() const -> std::string {
        mut str : std::string = .left->Get() + "<";

        mut i : int = 0;
        while i < .args.size() {
            str += .args[i]->Get();

            if i < .args.size() - 1 {
                str += ", "; 
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTTemplateArgs";
    }
}

// Pointer Declaration
class ASTPointerDecl(pub ASTNode) {
    pub mut left : ASTNode*;

    pub ASTPointerDecl(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTPointerDecl() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret .left->ToString() + "*";
    }

    pub Get() const -> std::string {
        ret .left->Get() + "*";
    }

    pub GetType() const -> std::string {
        ret "ASTPointerDecl";
    }
}

// Reference Declaration
class ASTReferenceDecl(pub ASTNode) {
    pub mut left : ASTNode*;

    pub ASTReferenceDecl(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTReferenceDecl() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret .left->ToString() + "&";
    }

    pub Get() const -> std::string {
        ret .left->Get() + "&";
    }

    pub GetType() const -> std::string {
        ret "ASTReferenceDecl";
    }
}

// Ellipsis
class ASTEllipsis(pub ASTNode) {
    pub mut left : ASTNode*;

    pub ASTEllipsis(left : ASTNode*) {
        .left = left;
    }

    pub ~ASTEllipsis() {
        del .left;
    }

    pub ToString() const -> std::string {
        ret .left->ToString() + "...";
    }

    pub Get() const -> std::string {
        ret .left->Get() + "...";
    }

    pub GetType() const -> std::string {
        ret "ASTEllipsis";
    }
}

// New Expression
class ASTNew(pub ASTNode) {
    pub mut node : ASTNode*;

    pub ASTNew(node : ASTNode*) {
        .node = node;
    }

    pub ~ASTNew() {
        del .node;
    }

    pub ToString() const -> std::string {
        ret "new " + .node->ToString();
    }

    pub Get() const -> std::string {
        ret "new " + .node->Get();
    }

    pub GetType() const -> std::string {
        ret "ASTNew";
    }
}

// Del Expression
class ASTDel(pub ASTNode) {
    pub mut node : ASTExpr*;
    pub mut isArray : bool;

    pub ASTDel(node : ASTExpr*, isArray : bool) {
        .node = node;
        .isArray = isArray;
    }

    pub ~ASTDel() {
        del .node;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "delete ";

        if .isArray {
            str += "[] ";
        }

        str += .node->ToString();
        ret str;
    }

    pub Get() const -> std::string {
        mut str : std::string = "delete ";

        if .isArray {
            str += "[] ";
        }

        str += .node->Get();
        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTDel";
    }
}

// Type Declaration
class ASTTypeDecl(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTTypeDecl(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTTypeDecl() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret .left->ToString() + " " + .right->ToString();
    }

    pub Get() const -> std::string {
        ret .left->Get() + " " + .right->Get();
    }

    pub GetType() const -> std::string {
        ret "ASTTypeDecl";
    }
}

// body of a function
class ASTBody(pub ASTNode) {
    pub mut decls : std::vector<ASTNode*>;
 
    pub ASTBody() {
    }

    pub ASTBody(decls : std::vector<ASTNode*>) {
        .decls = decls;
    }

    pub ~ASTBody() {
        mut i : int = 0;
        while i < .decls.size() {
            del .decls[i];
        }
    }

    pub AddStatement(stmt : ASTNode*) -> void {
        .decls.push_back(stmt);
    }

    pub ToString() const -> std::string {
        mut str : std::string = "{";

        mut i : int = 0;
        while i < .decls.size() {
            str += .decls[i]->ToString();

            if i < .decls.size() - 1 {
                str += "\n";
            }

            i++;
        }

        str += "}";
        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTBody";
    }

    pub GetType() const -> std::string {
        ret "ASTBody";
    }
}

// Type 
class ASTType(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut arrayDecl : std::vector<ASTNode*>;
    pub mut isConst : bool = false;
    pub mut ellipsis : bool = false;
    
    pub ASTType(left : ASTNode*, arrayDecl : std::vector<ASTNode*>) {
        .left = left;
        .arrayDecl = arrayDecl;
    }

    pub ~ASTType() {
        del .left;
        mut i : int = 0;
        while i < .arrayDecl.size() {
            del .arrayDecl[i];
        }
    }

    pub ToString() const -> std::string {
        ret .left->ToString();
    }

    pub Get() const -> std::string {
        mut str : std::string = "";
        if .isConst {
            str = "const ";
        }

        mut name : std::string = .left->Get();

        if name == "type" { name = "typename"; }

        str += name;

        if .ellipsis { str += "..."; }

        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTType";
    }

    pub IsPointer() const -> bool {
        ret dynamic_cast<ASTPointerDecl*>(.left) != null;
    }
}

// Array Declaration
class ASTArray(pub ASTNode) {
    mut args : std::vector<ASTNode*>;

    pub ASTArray() {
    }

    pub ASTArray(args : std::vector<ASTNode*>) {
        .args = args;
    }

    pub ~ASTArray() {
        for arg : ASTNode* in .args {
            del arg;
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string = "{";

        mut i : int = 0;
        while i < .args.size() {
            str += .args[i]->Get();

            if i < .args.size() - 1 {
                str += ", ";
            }

            i++;
        }

        str += "}";
        ret str;
    }

    pub Get() const -> std::string {
        ret .ToString();
    }

    pub GetType() const -> std::string {
        ret "ASTArray";
    }
}

// Argument Declaration
class ASTArgDecl(pub ASTNode) {
    pub mut left : ASTNode*;
    pub mut right : ASTNode*;

    pub ASTArgDecl(left : ASTNode*, right : ASTNode*) {
        .left = left;
        .right = right;
    }

    pub ~ASTArgDecl() {
        del .left;
        del .right;
    }

    pub ToString() const -> std::string {
        ret .right->ToString() + " " + .left->ToString();
    }

    pub Get() const -> std::string {
        ret .right->Get() + " " + .left->Get();
    }

    pub GetType() const -> std::string {
        ret "ASTArgDecl";
    }
}

// Template Declaration
class ASTTemplateDecl(pub ASTNode) {
    pub mut args : std::vector<ASTArgDecl*>;

    pub ASTTemplateDecl(args : std::vector<ASTArgDecl*>) {
        .args = args;
    }

    pub ~ASTTemplateDecl() {
        mut i : int = 0;
        while i < .args.size() {
            del .args[i];
        }
    }

    pub AddArg(arg : ASTArgDecl*) -> void {
        .args.push_back(arg);
    }

    pub ToString() const -> std::string {
        mut str : std::string = "template<";

        mut i : int = 0;
        while i < .args.size() {
            str += .args[i]->ToString();

            if i < .args.size() - 1 {
                str += ", ";
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub Get() const -> std::string {
        mut str : std::string = "template<";

        mut i : int = 0;
        while i < .args.size() {
            str += .args[i]->Get();

            if i < .args.size() - 1 {
                str += ", ";
            }

            i++;
        }

        str += ">";
        ret str;
    }

    pub GetType() const -> std::string {
        ret "ASTTemplateDecl";
    }
}

// Template Specialization
class ASTTemplateSpec(pub ASTNode) {
    pub mut args : std::vector<ASTNode*>;

    pub ASTTemplateSpec(args : std::vector<ASTNode*>) {
        .args = args;
    }

    pub ~ASTTemplateSpec() {
        mut i : int = 0;
        while i < .args.size() {
            del .args[i];
        }
    }
}

// Operator Declaration
class ASTOperatorDecl(pub ASTNode) {
    pub mut operation : std::string;
    pub mut args : std::vector<ASTArgDecl*>;
    pub mut returnType : ASTType*;
    pub mut body : ASTBody*;

    pub ASTOperatorDecl(operation : std::string, args : std::vector<ASTArgDecl*>, returnType : ASTType*, body : ASTBody*) {
        .operation = operation;
        .args = args;
        .returnType = returnType;
        .body = body;
    }

    pub ~ASTOperatorDecl() {
        mut i : int = 0;
        while i < .args.size() {
            del .args[i];
        }

        del .returnType;
        del .body;
    }

    pub ToString() const -> std::string { ret "ASTOperatorDecl"; }

    pub Get() const -> std::string { ret "ASTOperatorDecl"; }

    pub GetType() const -> std::string { ret "ASTOperatorDecl"; }
}

// Function Declaration 
class ASTFunctionDecl(pub ASTNode) {
    pub mut name : ASTVariable*;
    pub mut templateDecl : ASTTemplateDecl*;
    pub mut templateSpec : ASTTemplateSpec*;
    pub mut args : std::vector<ASTArgDecl*>;
    pub mut fType : ASTType*;
    pub mut body : ASTBody*;

    pub ASTFunctionDecl(
            name : ASTVariable*,
            templateDecl : ASTTemplateDecl*,
            templateSpec : ASTTemplateSpec*,
            args : std::vector<ASTArgDecl*>,
            fType : ASTType*,
            body : ASTBody*) {
        .name = name;
        .templateDecl = templateDecl;
        .templateSpec = templateSpec;
        .args = args;
        .fType = fType;
        .body = body;
    }

    pub ~ASTFunctionDecl() {
        del .name;
        del .templateDecl;
        del .templateSpec;
        mut i : int = 0;
        while i < .args.size() {
            del .args[i];
        }
        del .fType;
        del .body;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "";
        ret str;
    }
    
    pub Get() const -> std::string {
        ret "ASTFunctionDecl";
    }

    pub GetType() const -> std::string {
        ret "ASTFunctionDecl";
    }
}

// Return Statement
class ASTReturn(pub ASTNode) {
    pub mut expr : ASTExpr*;

    pub ASTReturn(expr : ASTExpr*) {
        .expr = expr;
    }

    pub ~ASTReturn() {
        del .expr;
    }

    pub ToString() const -> std::string {
        ret "return " + .expr->ToString() + ";";
    }

    pub Get() const -> std::string {
        ret "ASTReturn";
    }

    pub GetType() const -> std::string {
        ret "ASTReturn";
    }
}

// If Statement
class ASTIf(pub ASTNode) {
    pub mut expr : ASTExpr*;
    pub mut body : ASTBody*;
    pub mut elifs : std::vector<ASTIf*>;
    pub mut elseBody : ASTBody*;

    pub ASTIf(expr : ASTExpr*, body : ASTBody*) {
        .expr = expr;
        .body = body;
    }

    pub ASTIf(expr : ASTExpr*, body : ASTBody*, elifs : std::vector<ASTIf*>, elseBody : ASTBody*) {
        .expr = expr;
        .body = body;
        .elifs = elifs;
        .elseBody = elseBody;
    }

    pub ~ASTIf() {
        del .expr;
        del .body;
        del .elseBody;

        mut i : int = 0;
        while ((i) < .elifs.size()) {
            del .elifs[i];
        }
    }

    pub ToString() const -> std::string {
        ret "if (" + .expr->ToString() + ") " + .body->ToString();
    }

    pub Get() const -> std::string {
        ret "ASTIf";
    }

    pub GetType() const -> std::string {
        ret "ASTIf";
    }
}

// While Statement
class ASTWhile(pub ASTNode) {
    pub mut expr : ASTExpr*;
    pub mut body : ASTBody*;

    pub ASTWhile(expr : ASTExpr*, body : ASTBody*) {
        .expr = expr;
        .body = body;
    }

    pub ~ASTWhile() {
        del .expr;
        del .body;
    }

    pub ToString() const -> std::string {
        ret "while (" + .expr->ToString() + ") " + .body->ToString();
    }

    pub Get() const -> std::string {
        ret "ASTWhile";
    }

    pub GetType() const -> std::string {
        ret "ASTWhile";
    }
}

// Break Statement
class ASTBreak(pub ASTNode) {
    pub ToString() const -> std::string {
        ret "break;";
    }

    pub Get() const -> std::string {
        ret "ASTBreak";
    }

    pub GetType() const -> std::string {
        ret "ASTBreak";
    }
}

// Continue Statement
class ASTContinue(pub ASTNode) {
    pub ToString() const -> std::string {
        ret "continue;";
    }

    pub Get() const -> std::string {
        ret "ASTContinue";
    }

    pub GetType() const -> std::string {
        ret "ASTContinue";
    }
}

// Variable Declaration
class ASTVariableDecl(pub ASTNode) {
    pub mut name : ASTNode*;
    pub mut vType : ASTType*;
    pub mut value : ASTExpr*;

    pub ASTVariableDecl(
            name : ASTNode*,
            vType : ASTType*,
            value : ASTExpr*) {
        .name = name;
        .vType = vType;
        .value = value;
    }

    pub ~ASTVariableDecl() {
        del .name;
        del .vType;
        del .value;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "let ";

        str += .vType->ToString() + " " + .name->ToString();

        if .value != null {
            str += " = " + .value->ToString();
        }

        str += ";";
        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTVariableDecl";
    }

    pub GetType() const -> std::string {
        ret "ASTVariableDecl";
    }
}

// Import Statement
class ASTImport(pub ASTNode) {
    pub mut path : Token*;

    pub ASTImport(path : Token*) {
        .path = path;
    }

    pub ToString() const -> std::string {
        ret "import " + .path->literal + ";";
    }

    pub Get() const -> std::string {
        ret "ASTImport";
    }

    pub GetType() const -> std::string {
        ret "ASTImport";
    }
}

// Include Statement
class ASTInclude(pub ASTNode) {
    pub mut path : Token*;

    pub ASTInclude(path : Token*) {
        .path = path;
    }

    pub ToString() const -> std::string {
        ret "include " + .path->literal + ";";
    }

    pub Get() const -> std::string {
        ret "ASTInclude";
    }

    pub GetType() const -> std::string {
        ret "ASTInclude";
    }
}

// Inheritance Argument
class ASTInherArg(pub ASTNode) {
    pub mut protection : Token*;
    pub mut name : ASTNode*;
    
    pub ASTInherArg(protection : Token*, name : ASTNode*) {
        .protection = protection;
        .name = name;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "";

        if .protection == null {
            str += "protected ";
        }
        elif .protection->tokenType == TokenType::Pub {
            str += "public ";
        }
        elif .protection->tokenType == TokenType::Priv {
            str += "private ";
        }

        ret str + .name->Get();
    }

    pub Get() const -> std::string {
        ret "ASTInherArg";
    }

    pub GetType() const -> std::string {
        ret "ASTInherArg";
    }
}

// Class Declaration
class ASTClassDecl(pub ASTNode) {
    pub mut name : ASTNode*;
    pub mut templateDecl : ASTTemplateDecl*;
    pub mut templateSpec : ASTTemplateSpec*;
    pub mut inherits : std::vector<ASTInherArg*>;
    pub mut body : ASTBody*;

    pub ASTClassDecl(
            name : ASTNode*,
            templateDecl : ASTTemplateDecl*,
            templateSpec : ASTTemplateSpec*,
            inherits : std::vector<ASTInherArg*>,
            body : ASTBody*) {
        .name = name;
        .templateDecl = templateDecl;
        .templateSpec = templateSpec;
        .inherits = inherits;
        .body = body;
    }

    pub ~ASTClassDecl() {
        del .name;
        del .templateDecl;
        del .templateSpec;
        del .body;

        mut i : int = 0;
        while i < .inherits.size() {
            del .inherits[i];
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string = "class " + .name->ToString();

        if .templateDecl != null {
            str += .templateDecl->ToString();
        }

        if .inherits.size() > 0 {
            str += " : ";

            mut i : int = 0;
            while i < .inherits.size() {
                str += .inherits[i]->ToString();

                if (i + 1 < .inherits.size()) {
                    str += ", ";
                }

                i += 1;
            }
        }

        str += .body->ToString();
        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTClassDecl";
    }

    pub GetType() const -> std::string {
        ret "ASTClassDecl";
    }
}

// Enum Field
class ASTEnumField(pub ASTNode) {
    pub mut name : ASTNode*;
    pub mut value : ASTExpr*;

    pub ASTEnumField(name : ASTNode*, value : ASTExpr*) {
        .name = name;
        .value = value;
    }

    pub ~ASTEnumField() {
        del .name;
        del .value;
    }

    pub ToString() const -> std::string {
        mut str : std::string = .name->ToString();

        if .value != null {
            str += " = " + .value->ToString();
        }

        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTEnumField";
    }

    pub GetType() const -> std::string {
        ret "ASTEnumField";
    }
}

// Enum Declaration
class ASTEnumDecl(pub ASTNode) {
    pub mut name : ASTNode*;
    pub mut values : std::vector<ASTEnumField*>;

    pub ASTEnumDecl(name : ASTNode*, values : std::vector<ASTEnumField*>) {
        .name = name;
        .values = values;
    }

    pub ~ASTEnumDecl() {
        del .name;

        mut i : int = 0;
        while i < .values.size() {
            del .values[i];
        }
    }

    pub ToString() const -> std::string {
        mut str : std::string = "enum " + .name->ToString() + " {\n";

        mut i : int = 0;
        while i < .values.size() {
            str += "    " + .values[i]->ToString() + ",\n";
            i += 1;
        }

        str += "}";
        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTEnumDecl";
    }

    pub GetType() const -> std::string {
        ret "ASTEnumDecl";
    }
}

// ForEach Loop Statement
class ASTForEachStmt(pub ASTNode) {
    pub mut isMutable : bool;
    pub mut arg : ASTArgDecl*;
    pub mut iterable : ASTExpr*;
    pub mut body : ASTBody*;

    pub ASTForEachStmt(isMutable : bool, arg : ASTArgDecl*, iterable : ASTExpr*, body : ASTBody*) {
        .isMutable = isMutable;
        .arg = arg;
        .iterable = iterable;
        .body = body;
    }

    pub ~ASTForEachStmt() {
        del .arg;
        del .iterable;
        del .body;
    }

    pub ToString() const -> std::string {
        mut str : std::string = "foreach ";

        if .isMutable {
            str += "mut ";
        }

        str += .arg->ToString() + " in " + .iterable->ToString() + .body->ToString();
        ret str;
    }

    pub Get() const -> std::string {
        ret "ASTForEachStmt";
    }

    pub GetType() const -> std::string {
        ret "ASTForEachStmt";
    }
}

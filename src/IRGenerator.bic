import "iostream";
import "vector";
import "tuple";
import "AST.bic";
import "IR.bic";

IsA<T : type>(node : ASTNode*) -> bool {
    ret (dynamic_cast<T*>(node)) != null;
}

As<T : type>(node : ASTNode*) -> T* {
    ret dynamic_cast<T*>(node);
}

class IRGenerator {
    pub Generate(ast : ASTNode*) -> IRNode* {
        let ir : IRNode* = TranslateNode(ast, null);
        ret ir;
    }

    TranslateNode(node : ASTNode*, parent : IRNode*) -> IRNode* {
        if (IsA<ASTProgram>(node)) { ret TranslateProgram(As<ASTProgram>(node)); }
        if (IsA<ASTBody>(node)) { ret TranslateBody(As<ASTBody>(node), parent); }
        if (IsA<ASTFunctionDecl>(node)) { ret TranslateFunction(As<ASTFunctionDecl>(node), parent); }
        if (IsA<ASTOperatorDecl>(node)) { ret TranslateOperator(As<ASTOperatorDecl>(node), parent); }
        if (IsA<ASTVariableDecl>(node)) { ret TranslateVariable(As<ASTVariableDecl>(node), parent); }
        if (IsA<ASTExpr>(node)) { ret TranslateExpr(As<ASTExpr>(node)); }
        if (IsA<ASTReturn>(node)) { ret TranslateReturn(As<ASTReturn>(node)); }
        if (IsA<ASTIf>(node)) { ret TranslateIf(As<ASTIf>(node)); }
        if (IsA<ASTWhile>(node)) { ret TranslateWhile(As<ASTWhile>(node)); }
        if (IsA<ASTBreak>(node)) { ret TranslateBreak(As<ASTBreak>(node)); }
        if (IsA<ASTContinue>(node)) { ret TranslateContinue(As<ASTContinue>(node)); }
        if (IsA<ASTImport>(node)) { ret TranslateImport(As<ASTImport>(node)); }
        if (IsA<ASTClassDecl>(node)) { ret TranslateClass(As<ASTClassDecl>(node), parent); }
        if (IsA<ASTEnumDecl>(node)) { ret TranslateEnum(As<ASTEnumDecl>(node), parent); }

        if (node != null) {
            std::cout << "Unknown node type: " << node->GetType() << std::endl;
        } else {
            std::cout << "Null node" << std::endl;
        }
        
        ret null;
    }

    // Simple translation of a expression
    TranslateExpr(node : ASTExpr*) -> IRExpr* {
        if (node == null) { ret null; }
        ret new IRExpr(node->Get());
    }

    TranslateProgram(node : ASTProgram*) -> IRNode* {
        mut decls : std::vector<IRNode*>;

        mut i : int = 0;
        while ((i) < node->decls.size()) {
            decls.push_back(TranslateNode(node->decls[i], null));
            i++;
        }

        ret new IRProgram(decls);
    }

    TranslateBody(body : ASTBody*, parent : IRNode*) -> IRBody* {
        mut irBody : IRBody* = new IRBody();

        mut i : int = 0;
        while ((i) < body->decls.size()) {
            let decl : ASTNode* = body->decls[i];
            let irDecl : IRNode* = TranslateNode(decl, parent);

            irBody->decls.push_back(irDecl);

            i++;
        }

        ret irBody;
    }

    TranslateFunction(funcDecl : ASTFunctionDecl*, parent : IRNode*) -> IRNode* {
        let func : IRFunction* = new IRFunction();
        func->name = funcDecl->name->Get();
        func->attr = funcDecl->attr;
        func->parent = parent;
        
        if (funcDecl->fType != null) {
            func->returnType = funcDecl->fType->Get();
        }
        else {
            func->returnType = "auto";
        }
        
        mut i : int = 0;
        while ((i) < funcDecl->args.size()) {
            let param : ASTArgDecl* = funcDecl->args[i];
            let irParam : std::tuple<std::string, std::string> = std::make_tuple(param->right->Get(), param->left->Get());
            func->params.push_back(irParam);
            i++;
        }

        let tmp : ASTTemplateDecl* = funcDecl->templateDecl;
        
        if (tmp) {
            i = 0;
            while ((i) < tmp->args.size()) {
                let arg : ASTArgDecl* = tmp->args[i];
                let irArg : std::tuple<std::string, std::string> = std::make_tuple(arg->right->Get(), arg->left->Get());
                func->templateParams.push_back(irArg);
                i++;
            }
        }

        if (funcDecl->body) {
            func->body = TranslateBody(funcDecl->body, null);
        }
        else {
            func->body = null;
        }

        ret func;
    }

    TranslateOperator(opDecl : ASTOperatorDecl*, parent : IRNode*) -> IRNode* {
        let operation : IROperator* = new IROperator();
        operation->name = "operator " + opDecl->operation;
        operation->attr = opDecl->attr;
        operation->parent = parent;
        
        if (opDecl->returnType != null) {
            operation->returnType = opDecl->returnType->Get();
        }
        else {
            operation->returnType = "auto";
        }
        
        mut i : int = 0;
        while ((i) < opDecl->args.size()) {
            let param : ASTArgDecl* = opDecl->args[i];
            let irParam : std::tuple<std::string, std::string> = std::make_tuple(param->right->Get(), param->left->Get());
            operation->params.push_back(irParam);
            i++;
        }

        if (opDecl->body) {
            operation->body = TranslateBody(opDecl->body, null);
        }
        else {
            operation->body = null;
        }

        ret operation;
    }

    TranslateReturn(r : ASTReturn*) -> IRReturn* {
        let irRet : IRReturn* = new IRReturn();
        irRet->expr = TranslateExpr(r->expr);

        ret irRet;
    }

    TranslateVariable(varDecl : ASTVariableDecl*, parent : IRNode*) -> IRNode* {
        let var : IRVariable* = new IRVariable();
        var->name = varDecl->name->Get();
        var->vType = varDecl->vType->Get();
        var->parent = parent;
        var->attr = varDecl->attr;
        
        if (!varDecl->isMutable) {
            var->attr |= Attribute::Const;
        }

        if (varDecl->value != null) {
            var->value = TranslateExpr(varDecl->value);
        }

        ret var;
    }

    TranslateIf(ifNode : ASTIf*) -> IRIf* {
        let irIf : IRIf* = new IRIf();
        irIf->cond = TranslateExpr(ifNode->expr);
        irIf->body = TranslateBody(ifNode->body, null);

        mut i : int = 0;
        while ((i) < ifNode->elifs.size()) {
            let _elif : ASTIf* = ifNode->elifs[i];
            let irElif : IRIf* = new IRIf();
            irElif->cond = TranslateExpr(_elif->expr);
            irElif->body = TranslateBody(_elif->body, null);

            irIf->elifs.push_back(irElif);

            i++;
        }

        if (ifNode->elseBody != null) {
            irIf->elseBody = TranslateBody(ifNode->elseBody, null);
        }

        ret irIf;
    }

    TranslateWhile(whileNode : ASTWhile*) -> IRWhile* {
        let irWhile : IRWhile* = new IRWhile();
        irWhile->cond = TranslateExpr(whileNode->expr);
        irWhile->body = TranslateBody(whileNode->body, null);

        ret irWhile;
    }

    TranslateBreak(breakNode : ASTBreak*) -> IRBreak* {
        ret new IRBreak();
    }

    TranslateContinue(continueNode : ASTContinue*) -> IRContinue* {
        ret new IRContinue();
    }

    TranslateImport(importNode : ASTImport*) -> IRImport* {
        let irImport : IRImport* = new IRImport();
        irImport->path = importNode->path->literal;

        ret irImport;
    }

    TranslateClass(classNode : ASTClassDecl*, parent : IRNode*) -> IRClass* {
        let irClass : IRClass* = new IRClass();
        irClass->name = classNode->name->Get();
        irClass->body = TranslateBody(classNode->body, null);
        irClass->parent = parent;

        mut i : int = 0;
        while ((i) < classNode->inherits.size()) {
            let inherit : ASTInherArg* = classNode->inherits[i];
            irClass->inherits.push_back(inherit->ToString());

            i++;
        }

        let tmp : ASTTemplateDecl* = classNode->templateDecl;
        
        if (tmp) {
            i = 0;
            while ((i) < tmp->args.size()) {
                let arg : ASTArgDecl* = tmp->args[i];
                let irArg : std::tuple<std::string, std::string> = std::make_tuple(arg->right->Get(), arg->left->Get());
                irClass->templateParams.push_back(irArg);
                i++;
            }
        }
        
        irClass->body = TranslateBody(classNode->body, irClass);

        ret irClass;
    }

    TranslateEnum(enumNode : ASTEnumDecl*, parent : IRNode*) -> IREnum* {
        let irEnum : IREnum* = new IREnum();
        irEnum->name = enumNode->name->Get();
        irEnum->parent = parent;

        mut i : int = 0;
        while ((i) < enumNode->values.size()) {
            mut value : ASTEnumField* = enumNode->values[i];
            
            irEnum->values.push_back(std::make_tuple(value->name->Get(), TranslateExpr(value->value)));

            i++;
        }

        ret irEnum;
    }
}
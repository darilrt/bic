include "iostream";
include "filesystem";
include "sstream";
include "IR.cic";
include "Common.cic";

IsA<T : type>(node : IRNode*) -> bool {
    ret dynamic_cast<T*>(node) != null;
}

As<T : type>(node : IRNode*) -> T* {
    ret dynamic_cast<T*>(node);
}

class CodeGenerator {
    pub mut sourceBuffer : std::string = "";
    pub mut headerBuffer : std::string = "";

    pub mut sourceStream : std::stringstream;
    pub mut headerStream : std::stringstream;

    pub mut indentCount : int = 0;
    pub mut indent : std::string = "";
    
    pub Generate(ir : IRNode*) -> void {
        if IsA<IRProgram>(ir) {
            ir->Generate(sourceStream, headerStream);
        }

        sourceBuffer = sourceStream.str();
        headerBuffer = headerStream.str();
    }
}